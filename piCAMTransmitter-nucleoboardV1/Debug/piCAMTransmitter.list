
piCAMTransmitter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b88  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08002d1c  08002d1c  00012d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d64  08002d64  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002d64  08002d64  00012d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d6c  08002d6c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d6c  08002d6c  00012d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d70  08002d70  00012d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002d74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  2000000c  08002d80  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08002d80  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a6c6  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016ac  00000000  00000000  0002a702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000898  00000000  00000000  0002bdb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000810  00000000  00000000  0002c648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020fdc  00000000  00000000  0002ce58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a116  00000000  00000000  0004de34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb362  00000000  00000000  00057f4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001232ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002250  00000000  00000000  001232fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002d04 	.word	0x08002d04

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002d04 	.word	0x08002d04

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 fa74 	bl	80009c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f807 	bl	80004f2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f8b6 	bl	8000654 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e8:	f000 f884 	bl	80005f4 <MX_USART2_UART_Init>
  MX_UART4_Init();
 80004ec:	f000 f852 	bl	8000594 <MX_UART4_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f0:	e7fe      	b.n	80004f0 <main+0x18>

080004f2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f2:	b580      	push	{r7, lr}
 80004f4:	b096      	sub	sp, #88	; 0x58
 80004f6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f8:	f107 0314 	add.w	r3, r7, #20
 80004fc:	2244      	movs	r2, #68	; 0x44
 80004fe:	2100      	movs	r1, #0
 8000500:	4618      	mov	r0, r3
 8000502:	f002 fbf7 	bl	8002cf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000506:	463b      	mov	r3, r7
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]
 8000512:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000514:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000518:	f000 fd58 	bl	8000fcc <HAL_PWREx_ControlVoltageScaling>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000522:	f000 f8fd 	bl	8000720 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000526:	2302      	movs	r3, #2
 8000528:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800052a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800052e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000530:	2340      	movs	r3, #64	; 0x40
 8000532:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000534:	2302      	movs	r3, #2
 8000536:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000538:	2302      	movs	r3, #2
 800053a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800053c:	2301      	movs	r3, #1
 800053e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000540:	230a      	movs	r3, #10
 8000542:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000544:	2307      	movs	r3, #7
 8000546:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000548:	2302      	movs	r3, #2
 800054a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800054c:	2302      	movs	r3, #2
 800054e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000550:	f107 0314 	add.w	r3, r7, #20
 8000554:	4618      	mov	r0, r3
 8000556:	f000 fd8f 	bl	8001078 <HAL_RCC_OscConfig>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000560:	f000 f8de 	bl	8000720 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000564:	230f      	movs	r3, #15
 8000566:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000568:	2303      	movs	r3, #3
 800056a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800056c:	2300      	movs	r3, #0
 800056e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000570:	2300      	movs	r3, #0
 8000572:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000574:	2300      	movs	r3, #0
 8000576:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000578:	463b      	mov	r3, r7
 800057a:	2104      	movs	r1, #4
 800057c:	4618      	mov	r0, r3
 800057e:	f001 f98f 	bl	80018a0 <HAL_RCC_ClockConfig>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000588:	f000 f8ca 	bl	8000720 <Error_Handler>
  }
}
 800058c:	bf00      	nop
 800058e:	3758      	adds	r7, #88	; 0x58
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}

08000594 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000598:	4b14      	ldr	r3, [pc, #80]	; (80005ec <MX_UART4_Init+0x58>)
 800059a:	4a15      	ldr	r2, [pc, #84]	; (80005f0 <MX_UART4_Init+0x5c>)
 800059c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800059e:	4b13      	ldr	r3, [pc, #76]	; (80005ec <MX_UART4_Init+0x58>)
 80005a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005a4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80005a6:	4b11      	ldr	r3, [pc, #68]	; (80005ec <MX_UART4_Init+0x58>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80005ac:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <MX_UART4_Init+0x58>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80005b2:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <MX_UART4_Init+0x58>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80005b8:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <MX_UART4_Init+0x58>)
 80005ba:	220c      	movs	r2, #12
 80005bc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005be:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <MX_UART4_Init+0x58>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80005c4:	4b09      	ldr	r3, [pc, #36]	; (80005ec <MX_UART4_Init+0x58>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005ca:	4b08      	ldr	r3, [pc, #32]	; (80005ec <MX_UART4_Init+0x58>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005d0:	4b06      	ldr	r3, [pc, #24]	; (80005ec <MX_UART4_Init+0x58>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80005d6:	4805      	ldr	r0, [pc, #20]	; (80005ec <MX_UART4_Init+0x58>)
 80005d8:	f001 fee4 	bl	80023a4 <HAL_UART_Init>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80005e2:	f000 f89d 	bl	8000720 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000028 	.word	0x20000028
 80005f0:	40004c00 	.word	0x40004c00

080005f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005f8:	4b14      	ldr	r3, [pc, #80]	; (800064c <MX_USART2_UART_Init+0x58>)
 80005fa:	4a15      	ldr	r2, [pc, #84]	; (8000650 <MX_USART2_UART_Init+0x5c>)
 80005fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005fe:	4b13      	ldr	r3, [pc, #76]	; (800064c <MX_USART2_UART_Init+0x58>)
 8000600:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000604:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000606:	4b11      	ldr	r3, [pc, #68]	; (800064c <MX_USART2_UART_Init+0x58>)
 8000608:	2200      	movs	r2, #0
 800060a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <MX_USART2_UART_Init+0x58>)
 800060e:	2200      	movs	r2, #0
 8000610:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000612:	4b0e      	ldr	r3, [pc, #56]	; (800064c <MX_USART2_UART_Init+0x58>)
 8000614:	2200      	movs	r2, #0
 8000616:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <MX_USART2_UART_Init+0x58>)
 800061a:	220c      	movs	r2, #12
 800061c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800061e:	4b0b      	ldr	r3, [pc, #44]	; (800064c <MX_USART2_UART_Init+0x58>)
 8000620:	2200      	movs	r2, #0
 8000622:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000624:	4b09      	ldr	r3, [pc, #36]	; (800064c <MX_USART2_UART_Init+0x58>)
 8000626:	2200      	movs	r2, #0
 8000628:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800062a:	4b08      	ldr	r3, [pc, #32]	; (800064c <MX_USART2_UART_Init+0x58>)
 800062c:	2200      	movs	r2, #0
 800062e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <MX_USART2_UART_Init+0x58>)
 8000632:	2200      	movs	r2, #0
 8000634:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000636:	4805      	ldr	r0, [pc, #20]	; (800064c <MX_USART2_UART_Init+0x58>)
 8000638:	f001 feb4 	bl	80023a4 <HAL_UART_Init>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000642:	f000 f86d 	bl	8000720 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	200000ac 	.word	0x200000ac
 8000650:	40004400 	.word	0x40004400

08000654 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b08a      	sub	sp, #40	; 0x28
 8000658:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065a:	f107 0314 	add.w	r3, r7, #20
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]
 8000668:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800066a:	4b2b      	ldr	r3, [pc, #172]	; (8000718 <MX_GPIO_Init+0xc4>)
 800066c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066e:	4a2a      	ldr	r2, [pc, #168]	; (8000718 <MX_GPIO_Init+0xc4>)
 8000670:	f043 0304 	orr.w	r3, r3, #4
 8000674:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000676:	4b28      	ldr	r3, [pc, #160]	; (8000718 <MX_GPIO_Init+0xc4>)
 8000678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067a:	f003 0304 	and.w	r3, r3, #4
 800067e:	613b      	str	r3, [r7, #16]
 8000680:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000682:	4b25      	ldr	r3, [pc, #148]	; (8000718 <MX_GPIO_Init+0xc4>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000686:	4a24      	ldr	r2, [pc, #144]	; (8000718 <MX_GPIO_Init+0xc4>)
 8000688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800068c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800068e:	4b22      	ldr	r3, [pc, #136]	; (8000718 <MX_GPIO_Init+0xc4>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069a:	4b1f      	ldr	r3, [pc, #124]	; (8000718 <MX_GPIO_Init+0xc4>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069e:	4a1e      	ldr	r2, [pc, #120]	; (8000718 <MX_GPIO_Init+0xc4>)
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006a6:	4b1c      	ldr	r3, [pc, #112]	; (8000718 <MX_GPIO_Init+0xc4>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b2:	4b19      	ldr	r3, [pc, #100]	; (8000718 <MX_GPIO_Init+0xc4>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b6:	4a18      	ldr	r2, [pc, #96]	; (8000718 <MX_GPIO_Init+0xc4>)
 80006b8:	f043 0302 	orr.w	r3, r3, #2
 80006bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006be:	4b16      	ldr	r3, [pc, #88]	; (8000718 <MX_GPIO_Init+0xc4>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c2:	f003 0302 	and.w	r3, r3, #2
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2120      	movs	r1, #32
 80006ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d2:	f000 fc55 	bl	8000f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006dc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80006e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	4619      	mov	r1, r3
 80006ec:	480b      	ldr	r0, [pc, #44]	; (800071c <MX_GPIO_Init+0xc8>)
 80006ee:	f000 facd 	bl	8000c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 80006f2:	2320      	movs	r3, #32
 80006f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f6:	2301      	movs	r3, #1
 80006f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fe:	2300      	movs	r3, #0
 8000700:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	4619      	mov	r1, r3
 8000708:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800070c:	f000 fabe 	bl	8000c8c <HAL_GPIO_Init>

}
 8000710:	bf00      	nop
 8000712:	3728      	adds	r7, #40	; 0x28
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40021000 	.word	0x40021000
 800071c:	48000800 	.word	0x48000800

08000720 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000724:	b672      	cpsid	i
}
 8000726:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000728:	e7fe      	b.n	8000728 <Error_Handler+0x8>
	...

0800072c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000732:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <HAL_MspInit+0x44>)
 8000734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000736:	4a0e      	ldr	r2, [pc, #56]	; (8000770 <HAL_MspInit+0x44>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	6613      	str	r3, [r2, #96]	; 0x60
 800073e:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <HAL_MspInit+0x44>)
 8000740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074a:	4b09      	ldr	r3, [pc, #36]	; (8000770 <HAL_MspInit+0x44>)
 800074c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800074e:	4a08      	ldr	r2, [pc, #32]	; (8000770 <HAL_MspInit+0x44>)
 8000750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000754:	6593      	str	r3, [r2, #88]	; 0x58
 8000756:	4b06      	ldr	r3, [pc, #24]	; (8000770 <HAL_MspInit+0x44>)
 8000758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800075a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075e:	603b      	str	r3, [r7, #0]
 8000760:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000762:	bf00      	nop
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	40021000 	.word	0x40021000

08000774 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b0a6      	sub	sp, #152	; 0x98
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800078c:	f107 031c 	add.w	r3, r7, #28
 8000790:	2268      	movs	r2, #104	; 0x68
 8000792:	2100      	movs	r1, #0
 8000794:	4618      	mov	r0, r3
 8000796:	f002 faad 	bl	8002cf4 <memset>
  if(huart->Instance==UART4)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a53      	ldr	r2, [pc, #332]	; (80008ec <HAL_UART_MspInit+0x178>)
 80007a0:	4293      	cmp	r3, r2
 80007a2:	d15e      	bne.n	8000862 <HAL_UART_MspInit+0xee>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80007a4:	2308      	movs	r3, #8
 80007a6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007ac:	f107 031c 	add.w	r3, r7, #28
 80007b0:	4618      	mov	r0, r3
 80007b2:	f001 fa99 	bl	8001ce8 <HAL_RCCEx_PeriphCLKConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80007bc:	f7ff ffb0 	bl	8000720 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80007c0:	4b4b      	ldr	r3, [pc, #300]	; (80008f0 <HAL_UART_MspInit+0x17c>)
 80007c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007c4:	4a4a      	ldr	r2, [pc, #296]	; (80008f0 <HAL_UART_MspInit+0x17c>)
 80007c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007ca:	6593      	str	r3, [r2, #88]	; 0x58
 80007cc:	4b48      	ldr	r3, [pc, #288]	; (80008f0 <HAL_UART_MspInit+0x17c>)
 80007ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80007d4:	61bb      	str	r3, [r7, #24]
 80007d6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d8:	4b45      	ldr	r3, [pc, #276]	; (80008f0 <HAL_UART_MspInit+0x17c>)
 80007da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007dc:	4a44      	ldr	r2, [pc, #272]	; (80008f0 <HAL_UART_MspInit+0x17c>)
 80007de:	f043 0301 	orr.w	r3, r3, #1
 80007e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e4:	4b42      	ldr	r3, [pc, #264]	; (80008f0 <HAL_UART_MspInit+0x17c>)
 80007e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e8:	f003 0301 	and.w	r3, r3, #1
 80007ec:	617b      	str	r3, [r7, #20]
 80007ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f0:	4b3f      	ldr	r3, [pc, #252]	; (80008f0 <HAL_UART_MspInit+0x17c>)
 80007f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f4:	4a3e      	ldr	r2, [pc, #248]	; (80008f0 <HAL_UART_MspInit+0x17c>)
 80007f6:	f043 0304 	orr.w	r3, r3, #4
 80007fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007fc:	4b3c      	ldr	r3, [pc, #240]	; (80008f0 <HAL_UART_MspInit+0x17c>)
 80007fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000800:	f003 0304 	and.w	r3, r3, #4
 8000804:	613b      	str	r3, [r7, #16]
 8000806:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000808:	2301      	movs	r3, #1
 800080a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080e:	2302      	movs	r3, #2
 8000810:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800081a:	2303      	movs	r3, #3
 800081c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000820:	2308      	movs	r3, #8
 8000822:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000826:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800082a:	4619      	mov	r1, r3
 800082c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000830:	f000 fa2c 	bl	8000c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000834:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000838:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083c:	2302      	movs	r3, #2
 800083e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000848:	2303      	movs	r3, #3
 800084a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800084e:	2308      	movs	r3, #8
 8000850:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000854:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000858:	4619      	mov	r1, r3
 800085a:	4826      	ldr	r0, [pc, #152]	; (80008f4 <HAL_UART_MspInit+0x180>)
 800085c:	f000 fa16 	bl	8000c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000860:	e040      	b.n	80008e4 <HAL_UART_MspInit+0x170>
  else if(huart->Instance==USART2)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a24      	ldr	r2, [pc, #144]	; (80008f8 <HAL_UART_MspInit+0x184>)
 8000868:	4293      	cmp	r3, r2
 800086a:	d13b      	bne.n	80008e4 <HAL_UART_MspInit+0x170>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800086c:	2302      	movs	r3, #2
 800086e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000870:	2300      	movs	r3, #0
 8000872:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000874:	f107 031c 	add.w	r3, r7, #28
 8000878:	4618      	mov	r0, r3
 800087a:	f001 fa35 	bl	8001ce8 <HAL_RCCEx_PeriphCLKConfig>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <HAL_UART_MspInit+0x114>
      Error_Handler();
 8000884:	f7ff ff4c 	bl	8000720 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000888:	4b19      	ldr	r3, [pc, #100]	; (80008f0 <HAL_UART_MspInit+0x17c>)
 800088a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800088c:	4a18      	ldr	r2, [pc, #96]	; (80008f0 <HAL_UART_MspInit+0x17c>)
 800088e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000892:	6593      	str	r3, [r2, #88]	; 0x58
 8000894:	4b16      	ldr	r3, [pc, #88]	; (80008f0 <HAL_UART_MspInit+0x17c>)
 8000896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a0:	4b13      	ldr	r3, [pc, #76]	; (80008f0 <HAL_UART_MspInit+0x17c>)
 80008a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a4:	4a12      	ldr	r2, [pc, #72]	; (80008f0 <HAL_UART_MspInit+0x17c>)
 80008a6:	f043 0301 	orr.w	r3, r3, #1
 80008aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ac:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <HAL_UART_MspInit+0x17c>)
 80008ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b0:	f003 0301 	and.w	r3, r3, #1
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008b8:	230c      	movs	r3, #12
 80008ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008be:	2302      	movs	r3, #2
 80008c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ca:	2303      	movs	r3, #3
 80008cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008d0:	2307      	movs	r3, #7
 80008d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80008da:	4619      	mov	r1, r3
 80008dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e0:	f000 f9d4 	bl	8000c8c <HAL_GPIO_Init>
}
 80008e4:	bf00      	nop
 80008e6:	3798      	adds	r7, #152	; 0x98
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40004c00 	.word	0x40004c00
 80008f0:	40021000 	.word	0x40021000
 80008f4:	48000800 	.word	0x48000800
 80008f8:	40004400 	.word	0x40004400

080008fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <NMI_Handler+0x4>

08000902 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000906:	e7fe      	b.n	8000906 <HardFault_Handler+0x4>

08000908 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800090c:	e7fe      	b.n	800090c <MemManage_Handler+0x4>

0800090e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000912:	e7fe      	b.n	8000912 <BusFault_Handler+0x4>

08000914 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <UsageFault_Handler+0x4>

0800091a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr

08000936 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000948:	f000 f89a 	bl	8000a80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}

08000950 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <SystemInit+0x20>)
 8000956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800095a:	4a05      	ldr	r2, [pc, #20]	; (8000970 <SystemInit+0x20>)
 800095c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000960:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000974:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000978:	f7ff ffea 	bl	8000950 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800097c:	480c      	ldr	r0, [pc, #48]	; (80009b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800097e:	490d      	ldr	r1, [pc, #52]	; (80009b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000980:	4a0d      	ldr	r2, [pc, #52]	; (80009b8 <LoopForever+0xe>)
  movs r3, #0
 8000982:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000984:	e002      	b.n	800098c <LoopCopyDataInit>

08000986 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000986:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000988:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800098a:	3304      	adds	r3, #4

0800098c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800098c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800098e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000990:	d3f9      	bcc.n	8000986 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000992:	4a0a      	ldr	r2, [pc, #40]	; (80009bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000994:	4c0a      	ldr	r4, [pc, #40]	; (80009c0 <LoopForever+0x16>)
  movs r3, #0
 8000996:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000998:	e001      	b.n	800099e <LoopFillZerobss>

0800099a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800099a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800099c:	3204      	adds	r2, #4

0800099e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800099e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a0:	d3fb      	bcc.n	800099a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009a2:	f002 f983 	bl	8002cac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009a6:	f7ff fd97 	bl	80004d8 <main>

080009aa <LoopForever>:

LoopForever:
    b LoopForever
 80009aa:	e7fe      	b.n	80009aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009ac:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 80009b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009b8:	08002d74 	.word	0x08002d74
  ldr r2, =_sbss
 80009bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009c0:	20000134 	.word	0x20000134

080009c4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009c4:	e7fe      	b.n	80009c4 <ADC1_IRQHandler>
	...

080009c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009ce:	2300      	movs	r3, #0
 80009d0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d2:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <HAL_Init+0x3c>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a0b      	ldr	r2, [pc, #44]	; (8000a04 <HAL_Init+0x3c>)
 80009d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009dc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009de:	2003      	movs	r0, #3
 80009e0:	f000 f920 	bl	8000c24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009e4:	2000      	movs	r0, #0
 80009e6:	f000 f80f 	bl	8000a08 <HAL_InitTick>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d002      	beq.n	80009f6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80009f0:	2301      	movs	r3, #1
 80009f2:	71fb      	strb	r3, [r7, #7]
 80009f4:	e001      	b.n	80009fa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009f6:	f7ff fe99 	bl	800072c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009fa:	79fb      	ldrb	r3, [r7, #7]
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40022000 	.word	0x40022000

08000a08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a10:	2300      	movs	r3, #0
 8000a12:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a14:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <HAL_InitTick+0x6c>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d023      	beq.n	8000a64 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a1c:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <HAL_InitTick+0x70>)
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <HAL_InitTick+0x6c>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	4619      	mov	r1, r3
 8000a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 f91d 	bl	8000c72 <HAL_SYSTICK_Config>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d10f      	bne.n	8000a5e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2b0f      	cmp	r3, #15
 8000a42:	d809      	bhi.n	8000a58 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a44:	2200      	movs	r2, #0
 8000a46:	6879      	ldr	r1, [r7, #4]
 8000a48:	f04f 30ff 	mov.w	r0, #4294967295
 8000a4c:	f000 f8f5 	bl	8000c3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a50:	4a0a      	ldr	r2, [pc, #40]	; (8000a7c <HAL_InitTick+0x74>)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6013      	str	r3, [r2, #0]
 8000a56:	e007      	b.n	8000a68 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	73fb      	strb	r3, [r7, #15]
 8000a5c:	e004      	b.n	8000a68 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	73fb      	strb	r3, [r7, #15]
 8000a62:	e001      	b.n	8000a68 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a64:	2301      	movs	r3, #1
 8000a66:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3710      	adds	r7, #16
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000008 	.word	0x20000008
 8000a78:	20000000 	.word	0x20000000
 8000a7c:	20000004 	.word	0x20000004

08000a80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <HAL_IncTick+0x20>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <HAL_IncTick+0x24>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4413      	add	r3, r2
 8000a90:	4a04      	ldr	r2, [pc, #16]	; (8000aa4 <HAL_IncTick+0x24>)
 8000a92:	6013      	str	r3, [r2, #0]
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	20000008 	.word	0x20000008
 8000aa4:	20000130 	.word	0x20000130

08000aa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  return uwTick;
 8000aac:	4b03      	ldr	r3, [pc, #12]	; (8000abc <HAL_GetTick+0x14>)
 8000aae:	681b      	ldr	r3, [r3, #0]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	20000130 	.word	0x20000130

08000ac0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f003 0307 	and.w	r3, r3, #7
 8000ace:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ad6:	68ba      	ldr	r2, [r7, #8]
 8000ad8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000adc:	4013      	ands	r3, r2
 8000ade:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ae8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000af2:	4a04      	ldr	r2, [pc, #16]	; (8000b04 <__NVIC_SetPriorityGrouping+0x44>)
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	60d3      	str	r3, [r2, #12]
}
 8000af8:	bf00      	nop
 8000afa:	3714      	adds	r7, #20
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b0c:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <__NVIC_GetPriorityGrouping+0x18>)
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	0a1b      	lsrs	r3, r3, #8
 8000b12:	f003 0307 	and.w	r3, r3, #7
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	6039      	str	r1, [r7, #0]
 8000b2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	db0a      	blt.n	8000b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	490c      	ldr	r1, [pc, #48]	; (8000b70 <__NVIC_SetPriority+0x4c>)
 8000b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b42:	0112      	lsls	r2, r2, #4
 8000b44:	b2d2      	uxtb	r2, r2
 8000b46:	440b      	add	r3, r1
 8000b48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b4c:	e00a      	b.n	8000b64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	b2da      	uxtb	r2, r3
 8000b52:	4908      	ldr	r1, [pc, #32]	; (8000b74 <__NVIC_SetPriority+0x50>)
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	f003 030f 	and.w	r3, r3, #15
 8000b5a:	3b04      	subs	r3, #4
 8000b5c:	0112      	lsls	r2, r2, #4
 8000b5e:	b2d2      	uxtb	r2, r2
 8000b60:	440b      	add	r3, r1
 8000b62:	761a      	strb	r2, [r3, #24]
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000e100 	.word	0xe000e100
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b089      	sub	sp, #36	; 0x24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	f1c3 0307 	rsb	r3, r3, #7
 8000b92:	2b04      	cmp	r3, #4
 8000b94:	bf28      	it	cs
 8000b96:	2304      	movcs	r3, #4
 8000b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	3304      	adds	r3, #4
 8000b9e:	2b06      	cmp	r3, #6
 8000ba0:	d902      	bls.n	8000ba8 <NVIC_EncodePriority+0x30>
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	3b03      	subs	r3, #3
 8000ba6:	e000      	b.n	8000baa <NVIC_EncodePriority+0x32>
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bac:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb0:	69bb      	ldr	r3, [r7, #24]
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	43da      	mvns	r2, r3
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	401a      	ands	r2, r3
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bca:	43d9      	mvns	r1, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd0:	4313      	orrs	r3, r2
         );
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3724      	adds	r7, #36	; 0x24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
	...

08000be0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3b01      	subs	r3, #1
 8000bec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bf0:	d301      	bcc.n	8000bf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e00f      	b.n	8000c16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	; (8000c20 <SysTick_Config+0x40>)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bfe:	210f      	movs	r1, #15
 8000c00:	f04f 30ff 	mov.w	r0, #4294967295
 8000c04:	f7ff ff8e 	bl	8000b24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c08:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <SysTick_Config+0x40>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c0e:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <SysTick_Config+0x40>)
 8000c10:	2207      	movs	r2, #7
 8000c12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	e000e010 	.word	0xe000e010

08000c24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f7ff ff47 	bl	8000ac0 <__NVIC_SetPriorityGrouping>
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b086      	sub	sp, #24
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	4603      	mov	r3, r0
 8000c42:	60b9      	str	r1, [r7, #8]
 8000c44:	607a      	str	r2, [r7, #4]
 8000c46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c4c:	f7ff ff5c 	bl	8000b08 <__NVIC_GetPriorityGrouping>
 8000c50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	68b9      	ldr	r1, [r7, #8]
 8000c56:	6978      	ldr	r0, [r7, #20]
 8000c58:	f7ff ff8e 	bl	8000b78 <NVIC_EncodePriority>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c62:	4611      	mov	r1, r2
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff ff5d 	bl	8000b24 <__NVIC_SetPriority>
}
 8000c6a:	bf00      	nop
 8000c6c:	3718      	adds	r7, #24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f7ff ffb0 	bl	8000be0 <SysTick_Config>
 8000c80:	4603      	mov	r3, r0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
	...

08000c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b087      	sub	sp, #28
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c96:	2300      	movs	r3, #0
 8000c98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c9a:	e154      	b.n	8000f46 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca8:	4013      	ands	r3, r2
 8000caa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	f000 8146 	beq.w	8000f40 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f003 0303 	and.w	r3, r3, #3
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d005      	beq.n	8000ccc <HAL_GPIO_Init+0x40>
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f003 0303 	and.w	r3, r3, #3
 8000cc8:	2b02      	cmp	r3, #2
 8000cca:	d130      	bne.n	8000d2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	689b      	ldr	r3, [r3, #8]
 8000cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	2203      	movs	r2, #3
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	68da      	ldr	r2, [r3, #12]
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d02:	2201      	movs	r2, #1
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	43db      	mvns	r3, r3
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	091b      	lsrs	r3, r3, #4
 8000d18:	f003 0201 	and.w	r2, r3, #1
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f003 0303 	and.w	r3, r3, #3
 8000d36:	2b03      	cmp	r3, #3
 8000d38:	d017      	beq.n	8000d6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	68db      	ldr	r3, [r3, #12]
 8000d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	2203      	movs	r2, #3
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	689a      	ldr	r2, [r3, #8]
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f003 0303 	and.w	r3, r3, #3
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d123      	bne.n	8000dbe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	08da      	lsrs	r2, r3, #3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	3208      	adds	r2, #8
 8000d7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	220f      	movs	r2, #15
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43db      	mvns	r3, r3
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	4013      	ands	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	691a      	ldr	r2, [r3, #16]
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	f003 0307 	and.w	r3, r3, #7
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	08da      	lsrs	r2, r3, #3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3208      	adds	r2, #8
 8000db8:	6939      	ldr	r1, [r7, #16]
 8000dba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	2203      	movs	r2, #3
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f003 0203 	and.w	r2, r3, #3
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	f000 80a0 	beq.w	8000f40 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e00:	4b58      	ldr	r3, [pc, #352]	; (8000f64 <HAL_GPIO_Init+0x2d8>)
 8000e02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e04:	4a57      	ldr	r2, [pc, #348]	; (8000f64 <HAL_GPIO_Init+0x2d8>)
 8000e06:	f043 0301 	orr.w	r3, r3, #1
 8000e0a:	6613      	str	r3, [r2, #96]	; 0x60
 8000e0c:	4b55      	ldr	r3, [pc, #340]	; (8000f64 <HAL_GPIO_Init+0x2d8>)
 8000e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e10:	f003 0301 	and.w	r3, r3, #1
 8000e14:	60bb      	str	r3, [r7, #8]
 8000e16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e18:	4a53      	ldr	r2, [pc, #332]	; (8000f68 <HAL_GPIO_Init+0x2dc>)
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	089b      	lsrs	r3, r3, #2
 8000e1e:	3302      	adds	r3, #2
 8000e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	f003 0303 	and.w	r3, r3, #3
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	220f      	movs	r2, #15
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e42:	d019      	beq.n	8000e78 <HAL_GPIO_Init+0x1ec>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4a49      	ldr	r2, [pc, #292]	; (8000f6c <HAL_GPIO_Init+0x2e0>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d013      	beq.n	8000e74 <HAL_GPIO_Init+0x1e8>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4a48      	ldr	r2, [pc, #288]	; (8000f70 <HAL_GPIO_Init+0x2e4>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d00d      	beq.n	8000e70 <HAL_GPIO_Init+0x1e4>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a47      	ldr	r2, [pc, #284]	; (8000f74 <HAL_GPIO_Init+0x2e8>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d007      	beq.n	8000e6c <HAL_GPIO_Init+0x1e0>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4a46      	ldr	r2, [pc, #280]	; (8000f78 <HAL_GPIO_Init+0x2ec>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d101      	bne.n	8000e68 <HAL_GPIO_Init+0x1dc>
 8000e64:	2304      	movs	r3, #4
 8000e66:	e008      	b.n	8000e7a <HAL_GPIO_Init+0x1ee>
 8000e68:	2307      	movs	r3, #7
 8000e6a:	e006      	b.n	8000e7a <HAL_GPIO_Init+0x1ee>
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	e004      	b.n	8000e7a <HAL_GPIO_Init+0x1ee>
 8000e70:	2302      	movs	r3, #2
 8000e72:	e002      	b.n	8000e7a <HAL_GPIO_Init+0x1ee>
 8000e74:	2301      	movs	r3, #1
 8000e76:	e000      	b.n	8000e7a <HAL_GPIO_Init+0x1ee>
 8000e78:	2300      	movs	r3, #0
 8000e7a:	697a      	ldr	r2, [r7, #20]
 8000e7c:	f002 0203 	and.w	r2, r2, #3
 8000e80:	0092      	lsls	r2, r2, #2
 8000e82:	4093      	lsls	r3, r2
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e8a:	4937      	ldr	r1, [pc, #220]	; (8000f68 <HAL_GPIO_Init+0x2dc>)
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	089b      	lsrs	r3, r3, #2
 8000e90:	3302      	adds	r3, #2
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e98:	4b38      	ldr	r3, [pc, #224]	; (8000f7c <HAL_GPIO_Init+0x2f0>)
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d003      	beq.n	8000ebc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ebc:	4a2f      	ldr	r2, [pc, #188]	; (8000f7c <HAL_GPIO_Init+0x2f0>)
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ec2:	4b2e      	ldr	r3, [pc, #184]	; (8000f7c <HAL_GPIO_Init+0x2f0>)
 8000ec4:	68db      	ldr	r3, [r3, #12]
 8000ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d003      	beq.n	8000ee6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ee6:	4a25      	ldr	r2, [pc, #148]	; (8000f7c <HAL_GPIO_Init+0x2f0>)
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000eec:	4b23      	ldr	r3, [pc, #140]	; (8000f7c <HAL_GPIO_Init+0x2f0>)
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d003      	beq.n	8000f10 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f10:	4a1a      	ldr	r2, [pc, #104]	; (8000f7c <HAL_GPIO_Init+0x2f0>)
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000f16:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <HAL_GPIO_Init+0x2f0>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	4013      	ands	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d003      	beq.n	8000f3a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f3a:	4a10      	ldr	r2, [pc, #64]	; (8000f7c <HAL_GPIO_Init+0x2f0>)
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	3301      	adds	r3, #1
 8000f44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	f47f aea3 	bne.w	8000c9c <HAL_GPIO_Init+0x10>
  }
}
 8000f56:	bf00      	nop
 8000f58:	bf00      	nop
 8000f5a:	371c      	adds	r7, #28
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	40021000 	.word	0x40021000
 8000f68:	40010000 	.word	0x40010000
 8000f6c:	48000400 	.word	0x48000400
 8000f70:	48000800 	.word	0x48000800
 8000f74:	48000c00 	.word	0x48000c00
 8000f78:	48001000 	.word	0x48001000
 8000f7c:	40010400 	.word	0x40010400

08000f80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	460b      	mov	r3, r1
 8000f8a:	807b      	strh	r3, [r7, #2]
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f90:	787b      	ldrb	r3, [r7, #1]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d003      	beq.n	8000f9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f96:	887a      	ldrh	r2, [r7, #2]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f9c:	e002      	b.n	8000fa4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f9e:	887a      	ldrh	r2, [r7, #2]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000fb4:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <HAL_PWREx_GetVoltageRange+0x18>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	40007000 	.word	0x40007000

08000fcc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fda:	d130      	bne.n	800103e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fdc:	4b23      	ldr	r3, [pc, #140]	; (800106c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000fe4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fe8:	d038      	beq.n	800105c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fea:	4b20      	ldr	r3, [pc, #128]	; (800106c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ff2:	4a1e      	ldr	r2, [pc, #120]	; (800106c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ff4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ff8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000ffa:	4b1d      	ldr	r3, [pc, #116]	; (8001070 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2232      	movs	r2, #50	; 0x32
 8001000:	fb02 f303 	mul.w	r3, r2, r3
 8001004:	4a1b      	ldr	r2, [pc, #108]	; (8001074 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001006:	fba2 2303 	umull	r2, r3, r2, r3
 800100a:	0c9b      	lsrs	r3, r3, #18
 800100c:	3301      	adds	r3, #1
 800100e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001010:	e002      	b.n	8001018 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	3b01      	subs	r3, #1
 8001016:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001018:	4b14      	ldr	r3, [pc, #80]	; (800106c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800101a:	695b      	ldr	r3, [r3, #20]
 800101c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001020:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001024:	d102      	bne.n	800102c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d1f2      	bne.n	8001012 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800102c:	4b0f      	ldr	r3, [pc, #60]	; (800106c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800102e:	695b      	ldr	r3, [r3, #20]
 8001030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001034:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001038:	d110      	bne.n	800105c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	e00f      	b.n	800105e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800103e:	4b0b      	ldr	r3, [pc, #44]	; (800106c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001046:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800104a:	d007      	beq.n	800105c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800104c:	4b07      	ldr	r3, [pc, #28]	; (800106c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001054:	4a05      	ldr	r2, [pc, #20]	; (800106c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001056:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800105a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3714      	adds	r7, #20
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	40007000 	.word	0x40007000
 8001070:	20000000 	.word	0x20000000
 8001074:	431bde83 	.word	0x431bde83

08001078 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b088      	sub	sp, #32
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d102      	bne.n	800108c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	f000 bc02 	b.w	8001890 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800108c:	4b96      	ldr	r3, [pc, #600]	; (80012e8 <HAL_RCC_OscConfig+0x270>)
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	f003 030c 	and.w	r3, r3, #12
 8001094:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001096:	4b94      	ldr	r3, [pc, #592]	; (80012e8 <HAL_RCC_OscConfig+0x270>)
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	f003 0303 	and.w	r3, r3, #3
 800109e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 0310 	and.w	r3, r3, #16
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	f000 80e4 	beq.w	8001276 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d007      	beq.n	80010c4 <HAL_RCC_OscConfig+0x4c>
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	2b0c      	cmp	r3, #12
 80010b8:	f040 808b 	bne.w	80011d2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	f040 8087 	bne.w	80011d2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010c4:	4b88      	ldr	r3, [pc, #544]	; (80012e8 <HAL_RCC_OscConfig+0x270>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 0302 	and.w	r3, r3, #2
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d005      	beq.n	80010dc <HAL_RCC_OscConfig+0x64>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d101      	bne.n	80010dc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e3d9      	b.n	8001890 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6a1a      	ldr	r2, [r3, #32]
 80010e0:	4b81      	ldr	r3, [pc, #516]	; (80012e8 <HAL_RCC_OscConfig+0x270>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 0308 	and.w	r3, r3, #8
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d004      	beq.n	80010f6 <HAL_RCC_OscConfig+0x7e>
 80010ec:	4b7e      	ldr	r3, [pc, #504]	; (80012e8 <HAL_RCC_OscConfig+0x270>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010f4:	e005      	b.n	8001102 <HAL_RCC_OscConfig+0x8a>
 80010f6:	4b7c      	ldr	r3, [pc, #496]	; (80012e8 <HAL_RCC_OscConfig+0x270>)
 80010f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010fc:	091b      	lsrs	r3, r3, #4
 80010fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001102:	4293      	cmp	r3, r2
 8001104:	d223      	bcs.n	800114e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6a1b      	ldr	r3, [r3, #32]
 800110a:	4618      	mov	r0, r3
 800110c:	f000 fd8c 	bl	8001c28 <RCC_SetFlashLatencyFromMSIRange>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e3ba      	b.n	8001890 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800111a:	4b73      	ldr	r3, [pc, #460]	; (80012e8 <HAL_RCC_OscConfig+0x270>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a72      	ldr	r2, [pc, #456]	; (80012e8 <HAL_RCC_OscConfig+0x270>)
 8001120:	f043 0308 	orr.w	r3, r3, #8
 8001124:	6013      	str	r3, [r2, #0]
 8001126:	4b70      	ldr	r3, [pc, #448]	; (80012e8 <HAL_RCC_OscConfig+0x270>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6a1b      	ldr	r3, [r3, #32]
 8001132:	496d      	ldr	r1, [pc, #436]	; (80012e8 <HAL_RCC_OscConfig+0x270>)
 8001134:	4313      	orrs	r3, r2
 8001136:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001138:	4b6b      	ldr	r3, [pc, #428]	; (80012e8 <HAL_RCC_OscConfig+0x270>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	69db      	ldr	r3, [r3, #28]
 8001144:	021b      	lsls	r3, r3, #8
 8001146:	4968      	ldr	r1, [pc, #416]	; (80012e8 <HAL_RCC_OscConfig+0x270>)
 8001148:	4313      	orrs	r3, r2
 800114a:	604b      	str	r3, [r1, #4]
 800114c:	e025      	b.n	800119a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800114e:	4b66      	ldr	r3, [pc, #408]	; (80012e8 <HAL_RCC_OscConfig+0x270>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a65      	ldr	r2, [pc, #404]	; (80012e8 <HAL_RCC_OscConfig+0x270>)
 8001154:	f043 0308 	orr.w	r3, r3, #8
 8001158:	6013      	str	r3, [r2, #0]
 800115a:	4b63      	ldr	r3, [pc, #396]	; (80012e8 <HAL_RCC_OscConfig+0x270>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6a1b      	ldr	r3, [r3, #32]
 8001166:	4960      	ldr	r1, [pc, #384]	; (80012e8 <HAL_RCC_OscConfig+0x270>)
 8001168:	4313      	orrs	r3, r2
 800116a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800116c:	4b5e      	ldr	r3, [pc, #376]	; (80012e8 <HAL_RCC_OscConfig+0x270>)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	69db      	ldr	r3, [r3, #28]
 8001178:	021b      	lsls	r3, r3, #8
 800117a:	495b      	ldr	r1, [pc, #364]	; (80012e8 <HAL_RCC_OscConfig+0x270>)
 800117c:	4313      	orrs	r3, r2
 800117e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d109      	bne.n	800119a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6a1b      	ldr	r3, [r3, #32]
 800118a:	4618      	mov	r0, r3
 800118c:	f000 fd4c 	bl	8001c28 <RCC_SetFlashLatencyFromMSIRange>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e37a      	b.n	8001890 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800119a:	f000 fc81 	bl	8001aa0 <HAL_RCC_GetSysClockFreq>
 800119e:	4602      	mov	r2, r0
 80011a0:	4b51      	ldr	r3, [pc, #324]	; (80012e8 <HAL_RCC_OscConfig+0x270>)
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	091b      	lsrs	r3, r3, #4
 80011a6:	f003 030f 	and.w	r3, r3, #15
 80011aa:	4950      	ldr	r1, [pc, #320]	; (80012ec <HAL_RCC_OscConfig+0x274>)
 80011ac:	5ccb      	ldrb	r3, [r1, r3]
 80011ae:	f003 031f 	and.w	r3, r3, #31
 80011b2:	fa22 f303 	lsr.w	r3, r2, r3
 80011b6:	4a4e      	ldr	r2, [pc, #312]	; (80012f0 <HAL_RCC_OscConfig+0x278>)
 80011b8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80011ba:	4b4e      	ldr	r3, [pc, #312]	; (80012f4 <HAL_RCC_OscConfig+0x27c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff fc22 	bl	8000a08 <HAL_InitTick>
 80011c4:	4603      	mov	r3, r0
 80011c6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d052      	beq.n	8001274 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80011ce:	7bfb      	ldrb	r3, [r7, #15]
 80011d0:	e35e      	b.n	8001890 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	699b      	ldr	r3, [r3, #24]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d032      	beq.n	8001240 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80011da:	4b43      	ldr	r3, [pc, #268]	; (80012e8 <HAL_RCC_OscConfig+0x270>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a42      	ldr	r2, [pc, #264]	; (80012e8 <HAL_RCC_OscConfig+0x270>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011e6:	f7ff fc5f 	bl	8000aa8 <HAL_GetTick>
 80011ea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011ec:	e008      	b.n	8001200 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011ee:	f7ff fc5b 	bl	8000aa8 <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d901      	bls.n	8001200 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80011fc:	2303      	movs	r3, #3
 80011fe:	e347      	b.n	8001890 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001200:	4b39      	ldr	r3, [pc, #228]	; (80012e8 <HAL_RCC_OscConfig+0x270>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0302 	and.w	r3, r3, #2
 8001208:	2b00      	cmp	r3, #0
 800120a:	d0f0      	beq.n	80011ee <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800120c:	4b36      	ldr	r3, [pc, #216]	; (80012e8 <HAL_RCC_OscConfig+0x270>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a35      	ldr	r2, [pc, #212]	; (80012e8 <HAL_RCC_OscConfig+0x270>)
 8001212:	f043 0308 	orr.w	r3, r3, #8
 8001216:	6013      	str	r3, [r2, #0]
 8001218:	4b33      	ldr	r3, [pc, #204]	; (80012e8 <HAL_RCC_OscConfig+0x270>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6a1b      	ldr	r3, [r3, #32]
 8001224:	4930      	ldr	r1, [pc, #192]	; (80012e8 <HAL_RCC_OscConfig+0x270>)
 8001226:	4313      	orrs	r3, r2
 8001228:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800122a:	4b2f      	ldr	r3, [pc, #188]	; (80012e8 <HAL_RCC_OscConfig+0x270>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	021b      	lsls	r3, r3, #8
 8001238:	492b      	ldr	r1, [pc, #172]	; (80012e8 <HAL_RCC_OscConfig+0x270>)
 800123a:	4313      	orrs	r3, r2
 800123c:	604b      	str	r3, [r1, #4]
 800123e:	e01a      	b.n	8001276 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001240:	4b29      	ldr	r3, [pc, #164]	; (80012e8 <HAL_RCC_OscConfig+0x270>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a28      	ldr	r2, [pc, #160]	; (80012e8 <HAL_RCC_OscConfig+0x270>)
 8001246:	f023 0301 	bic.w	r3, r3, #1
 800124a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800124c:	f7ff fc2c 	bl	8000aa8 <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001254:	f7ff fc28 	bl	8000aa8 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b02      	cmp	r3, #2
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e314      	b.n	8001890 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001266:	4b20      	ldr	r3, [pc, #128]	; (80012e8 <HAL_RCC_OscConfig+0x270>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1f0      	bne.n	8001254 <HAL_RCC_OscConfig+0x1dc>
 8001272:	e000      	b.n	8001276 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001274:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	2b00      	cmp	r3, #0
 8001280:	d073      	beq.n	800136a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	2b08      	cmp	r3, #8
 8001286:	d005      	beq.n	8001294 <HAL_RCC_OscConfig+0x21c>
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	2b0c      	cmp	r3, #12
 800128c:	d10e      	bne.n	80012ac <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	2b03      	cmp	r3, #3
 8001292:	d10b      	bne.n	80012ac <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001294:	4b14      	ldr	r3, [pc, #80]	; (80012e8 <HAL_RCC_OscConfig+0x270>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d063      	beq.n	8001368 <HAL_RCC_OscConfig+0x2f0>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d15f      	bne.n	8001368 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e2f1      	b.n	8001890 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012b4:	d106      	bne.n	80012c4 <HAL_RCC_OscConfig+0x24c>
 80012b6:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <HAL_RCC_OscConfig+0x270>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a0b      	ldr	r2, [pc, #44]	; (80012e8 <HAL_RCC_OscConfig+0x270>)
 80012bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c0:	6013      	str	r3, [r2, #0]
 80012c2:	e025      	b.n	8001310 <HAL_RCC_OscConfig+0x298>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012cc:	d114      	bne.n	80012f8 <HAL_RCC_OscConfig+0x280>
 80012ce:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <HAL_RCC_OscConfig+0x270>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a05      	ldr	r2, [pc, #20]	; (80012e8 <HAL_RCC_OscConfig+0x270>)
 80012d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	4b03      	ldr	r3, [pc, #12]	; (80012e8 <HAL_RCC_OscConfig+0x270>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a02      	ldr	r2, [pc, #8]	; (80012e8 <HAL_RCC_OscConfig+0x270>)
 80012e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e4:	6013      	str	r3, [r2, #0]
 80012e6:	e013      	b.n	8001310 <HAL_RCC_OscConfig+0x298>
 80012e8:	40021000 	.word	0x40021000
 80012ec:	08002d1c 	.word	0x08002d1c
 80012f0:	20000000 	.word	0x20000000
 80012f4:	20000004 	.word	0x20000004
 80012f8:	4ba0      	ldr	r3, [pc, #640]	; (800157c <HAL_RCC_OscConfig+0x504>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a9f      	ldr	r2, [pc, #636]	; (800157c <HAL_RCC_OscConfig+0x504>)
 80012fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001302:	6013      	str	r3, [r2, #0]
 8001304:	4b9d      	ldr	r3, [pc, #628]	; (800157c <HAL_RCC_OscConfig+0x504>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a9c      	ldr	r2, [pc, #624]	; (800157c <HAL_RCC_OscConfig+0x504>)
 800130a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800130e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d013      	beq.n	8001340 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001318:	f7ff fbc6 	bl	8000aa8 <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001320:	f7ff fbc2 	bl	8000aa8 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b64      	cmp	r3, #100	; 0x64
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e2ae      	b.n	8001890 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001332:	4b92      	ldr	r3, [pc, #584]	; (800157c <HAL_RCC_OscConfig+0x504>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d0f0      	beq.n	8001320 <HAL_RCC_OscConfig+0x2a8>
 800133e:	e014      	b.n	800136a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001340:	f7ff fbb2 	bl	8000aa8 <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001348:	f7ff fbae 	bl	8000aa8 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b64      	cmp	r3, #100	; 0x64
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e29a      	b.n	8001890 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800135a:	4b88      	ldr	r3, [pc, #544]	; (800157c <HAL_RCC_OscConfig+0x504>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1f0      	bne.n	8001348 <HAL_RCC_OscConfig+0x2d0>
 8001366:	e000      	b.n	800136a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001368:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d060      	beq.n	8001438 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	2b04      	cmp	r3, #4
 800137a:	d005      	beq.n	8001388 <HAL_RCC_OscConfig+0x310>
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	2b0c      	cmp	r3, #12
 8001380:	d119      	bne.n	80013b6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	2b02      	cmp	r3, #2
 8001386:	d116      	bne.n	80013b6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001388:	4b7c      	ldr	r3, [pc, #496]	; (800157c <HAL_RCC_OscConfig+0x504>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001390:	2b00      	cmp	r3, #0
 8001392:	d005      	beq.n	80013a0 <HAL_RCC_OscConfig+0x328>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d101      	bne.n	80013a0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e277      	b.n	8001890 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a0:	4b76      	ldr	r3, [pc, #472]	; (800157c <HAL_RCC_OscConfig+0x504>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	691b      	ldr	r3, [r3, #16]
 80013ac:	061b      	lsls	r3, r3, #24
 80013ae:	4973      	ldr	r1, [pc, #460]	; (800157c <HAL_RCC_OscConfig+0x504>)
 80013b0:	4313      	orrs	r3, r2
 80013b2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013b4:	e040      	b.n	8001438 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d023      	beq.n	8001406 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013be:	4b6f      	ldr	r3, [pc, #444]	; (800157c <HAL_RCC_OscConfig+0x504>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a6e      	ldr	r2, [pc, #440]	; (800157c <HAL_RCC_OscConfig+0x504>)
 80013c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ca:	f7ff fb6d 	bl	8000aa8 <HAL_GetTick>
 80013ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013d0:	e008      	b.n	80013e4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013d2:	f7ff fb69 	bl	8000aa8 <HAL_GetTick>
 80013d6:	4602      	mov	r2, r0
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d901      	bls.n	80013e4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e255      	b.n	8001890 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013e4:	4b65      	ldr	r3, [pc, #404]	; (800157c <HAL_RCC_OscConfig+0x504>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d0f0      	beq.n	80013d2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f0:	4b62      	ldr	r3, [pc, #392]	; (800157c <HAL_RCC_OscConfig+0x504>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	691b      	ldr	r3, [r3, #16]
 80013fc:	061b      	lsls	r3, r3, #24
 80013fe:	495f      	ldr	r1, [pc, #380]	; (800157c <HAL_RCC_OscConfig+0x504>)
 8001400:	4313      	orrs	r3, r2
 8001402:	604b      	str	r3, [r1, #4]
 8001404:	e018      	b.n	8001438 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001406:	4b5d      	ldr	r3, [pc, #372]	; (800157c <HAL_RCC_OscConfig+0x504>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a5c      	ldr	r2, [pc, #368]	; (800157c <HAL_RCC_OscConfig+0x504>)
 800140c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001410:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001412:	f7ff fb49 	bl	8000aa8 <HAL_GetTick>
 8001416:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001418:	e008      	b.n	800142c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800141a:	f7ff fb45 	bl	8000aa8 <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d901      	bls.n	800142c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e231      	b.n	8001890 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800142c:	4b53      	ldr	r3, [pc, #332]	; (800157c <HAL_RCC_OscConfig+0x504>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001434:	2b00      	cmp	r3, #0
 8001436:	d1f0      	bne.n	800141a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0308 	and.w	r3, r3, #8
 8001440:	2b00      	cmp	r3, #0
 8001442:	d03c      	beq.n	80014be <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	695b      	ldr	r3, [r3, #20]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d01c      	beq.n	8001486 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800144c:	4b4b      	ldr	r3, [pc, #300]	; (800157c <HAL_RCC_OscConfig+0x504>)
 800144e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001452:	4a4a      	ldr	r2, [pc, #296]	; (800157c <HAL_RCC_OscConfig+0x504>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800145c:	f7ff fb24 	bl	8000aa8 <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001464:	f7ff fb20 	bl	8000aa8 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e20c      	b.n	8001890 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001476:	4b41      	ldr	r3, [pc, #260]	; (800157c <HAL_RCC_OscConfig+0x504>)
 8001478:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d0ef      	beq.n	8001464 <HAL_RCC_OscConfig+0x3ec>
 8001484:	e01b      	b.n	80014be <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001486:	4b3d      	ldr	r3, [pc, #244]	; (800157c <HAL_RCC_OscConfig+0x504>)
 8001488:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800148c:	4a3b      	ldr	r2, [pc, #236]	; (800157c <HAL_RCC_OscConfig+0x504>)
 800148e:	f023 0301 	bic.w	r3, r3, #1
 8001492:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001496:	f7ff fb07 	bl	8000aa8 <HAL_GetTick>
 800149a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800149c:	e008      	b.n	80014b0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800149e:	f7ff fb03 	bl	8000aa8 <HAL_GetTick>
 80014a2:	4602      	mov	r2, r0
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d901      	bls.n	80014b0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e1ef      	b.n	8001890 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014b0:	4b32      	ldr	r3, [pc, #200]	; (800157c <HAL_RCC_OscConfig+0x504>)
 80014b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1ef      	bne.n	800149e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0304 	and.w	r3, r3, #4
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	f000 80a6 	beq.w	8001618 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014cc:	2300      	movs	r3, #0
 80014ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80014d0:	4b2a      	ldr	r3, [pc, #168]	; (800157c <HAL_RCC_OscConfig+0x504>)
 80014d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d10d      	bne.n	80014f8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014dc:	4b27      	ldr	r3, [pc, #156]	; (800157c <HAL_RCC_OscConfig+0x504>)
 80014de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e0:	4a26      	ldr	r2, [pc, #152]	; (800157c <HAL_RCC_OscConfig+0x504>)
 80014e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e6:	6593      	str	r3, [r2, #88]	; 0x58
 80014e8:	4b24      	ldr	r3, [pc, #144]	; (800157c <HAL_RCC_OscConfig+0x504>)
 80014ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014f4:	2301      	movs	r3, #1
 80014f6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014f8:	4b21      	ldr	r3, [pc, #132]	; (8001580 <HAL_RCC_OscConfig+0x508>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001500:	2b00      	cmp	r3, #0
 8001502:	d118      	bne.n	8001536 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001504:	4b1e      	ldr	r3, [pc, #120]	; (8001580 <HAL_RCC_OscConfig+0x508>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a1d      	ldr	r2, [pc, #116]	; (8001580 <HAL_RCC_OscConfig+0x508>)
 800150a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800150e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001510:	f7ff faca 	bl	8000aa8 <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001518:	f7ff fac6 	bl	8000aa8 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e1b2      	b.n	8001890 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800152a:	4b15      	ldr	r3, [pc, #84]	; (8001580 <HAL_RCC_OscConfig+0x508>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001532:	2b00      	cmp	r3, #0
 8001534:	d0f0      	beq.n	8001518 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d108      	bne.n	8001550 <HAL_RCC_OscConfig+0x4d8>
 800153e:	4b0f      	ldr	r3, [pc, #60]	; (800157c <HAL_RCC_OscConfig+0x504>)
 8001540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001544:	4a0d      	ldr	r2, [pc, #52]	; (800157c <HAL_RCC_OscConfig+0x504>)
 8001546:	f043 0301 	orr.w	r3, r3, #1
 800154a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800154e:	e029      	b.n	80015a4 <HAL_RCC_OscConfig+0x52c>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	2b05      	cmp	r3, #5
 8001556:	d115      	bne.n	8001584 <HAL_RCC_OscConfig+0x50c>
 8001558:	4b08      	ldr	r3, [pc, #32]	; (800157c <HAL_RCC_OscConfig+0x504>)
 800155a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800155e:	4a07      	ldr	r2, [pc, #28]	; (800157c <HAL_RCC_OscConfig+0x504>)
 8001560:	f043 0304 	orr.w	r3, r3, #4
 8001564:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001568:	4b04      	ldr	r3, [pc, #16]	; (800157c <HAL_RCC_OscConfig+0x504>)
 800156a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800156e:	4a03      	ldr	r2, [pc, #12]	; (800157c <HAL_RCC_OscConfig+0x504>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001578:	e014      	b.n	80015a4 <HAL_RCC_OscConfig+0x52c>
 800157a:	bf00      	nop
 800157c:	40021000 	.word	0x40021000
 8001580:	40007000 	.word	0x40007000
 8001584:	4b9a      	ldr	r3, [pc, #616]	; (80017f0 <HAL_RCC_OscConfig+0x778>)
 8001586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800158a:	4a99      	ldr	r2, [pc, #612]	; (80017f0 <HAL_RCC_OscConfig+0x778>)
 800158c:	f023 0301 	bic.w	r3, r3, #1
 8001590:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001594:	4b96      	ldr	r3, [pc, #600]	; (80017f0 <HAL_RCC_OscConfig+0x778>)
 8001596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800159a:	4a95      	ldr	r2, [pc, #596]	; (80017f0 <HAL_RCC_OscConfig+0x778>)
 800159c:	f023 0304 	bic.w	r3, r3, #4
 80015a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d016      	beq.n	80015da <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ac:	f7ff fa7c 	bl	8000aa8 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015b2:	e00a      	b.n	80015ca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015b4:	f7ff fa78 	bl	8000aa8 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e162      	b.n	8001890 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015ca:	4b89      	ldr	r3, [pc, #548]	; (80017f0 <HAL_RCC_OscConfig+0x778>)
 80015cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d0ed      	beq.n	80015b4 <HAL_RCC_OscConfig+0x53c>
 80015d8:	e015      	b.n	8001606 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015da:	f7ff fa65 	bl	8000aa8 <HAL_GetTick>
 80015de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015e0:	e00a      	b.n	80015f8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015e2:	f7ff fa61 	bl	8000aa8 <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e14b      	b.n	8001890 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015f8:	4b7d      	ldr	r3, [pc, #500]	; (80017f0 <HAL_RCC_OscConfig+0x778>)
 80015fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d1ed      	bne.n	80015e2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001606:	7ffb      	ldrb	r3, [r7, #31]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d105      	bne.n	8001618 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800160c:	4b78      	ldr	r3, [pc, #480]	; (80017f0 <HAL_RCC_OscConfig+0x778>)
 800160e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001610:	4a77      	ldr	r2, [pc, #476]	; (80017f0 <HAL_RCC_OscConfig+0x778>)
 8001612:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001616:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0320 	and.w	r3, r3, #32
 8001620:	2b00      	cmp	r3, #0
 8001622:	d03c      	beq.n	800169e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001628:	2b00      	cmp	r3, #0
 800162a:	d01c      	beq.n	8001666 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800162c:	4b70      	ldr	r3, [pc, #448]	; (80017f0 <HAL_RCC_OscConfig+0x778>)
 800162e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001632:	4a6f      	ldr	r2, [pc, #444]	; (80017f0 <HAL_RCC_OscConfig+0x778>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800163c:	f7ff fa34 	bl	8000aa8 <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001644:	f7ff fa30 	bl	8000aa8 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e11c      	b.n	8001890 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001656:	4b66      	ldr	r3, [pc, #408]	; (80017f0 <HAL_RCC_OscConfig+0x778>)
 8001658:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d0ef      	beq.n	8001644 <HAL_RCC_OscConfig+0x5cc>
 8001664:	e01b      	b.n	800169e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001666:	4b62      	ldr	r3, [pc, #392]	; (80017f0 <HAL_RCC_OscConfig+0x778>)
 8001668:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800166c:	4a60      	ldr	r2, [pc, #384]	; (80017f0 <HAL_RCC_OscConfig+0x778>)
 800166e:	f023 0301 	bic.w	r3, r3, #1
 8001672:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001676:	f7ff fa17 	bl	8000aa8 <HAL_GetTick>
 800167a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800167c:	e008      	b.n	8001690 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800167e:	f7ff fa13 	bl	8000aa8 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e0ff      	b.n	8001890 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001690:	4b57      	ldr	r3, [pc, #348]	; (80017f0 <HAL_RCC_OscConfig+0x778>)
 8001692:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1ef      	bne.n	800167e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f000 80f3 	beq.w	800188e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	f040 80c9 	bne.w	8001844 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80016b2:	4b4f      	ldr	r3, [pc, #316]	; (80017f0 <HAL_RCC_OscConfig+0x778>)
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	f003 0203 	and.w	r2, r3, #3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d12c      	bne.n	8001720 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d0:	3b01      	subs	r3, #1
 80016d2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d123      	bne.n	8001720 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016e2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d11b      	bne.n	8001720 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016f2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d113      	bne.n	8001720 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001702:	085b      	lsrs	r3, r3, #1
 8001704:	3b01      	subs	r3, #1
 8001706:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001708:	429a      	cmp	r2, r3
 800170a:	d109      	bne.n	8001720 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	085b      	lsrs	r3, r3, #1
 8001718:	3b01      	subs	r3, #1
 800171a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800171c:	429a      	cmp	r2, r3
 800171e:	d06b      	beq.n	80017f8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	2b0c      	cmp	r3, #12
 8001724:	d062      	beq.n	80017ec <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001726:	4b32      	ldr	r3, [pc, #200]	; (80017f0 <HAL_RCC_OscConfig+0x778>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e0ac      	b.n	8001890 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001736:	4b2e      	ldr	r3, [pc, #184]	; (80017f0 <HAL_RCC_OscConfig+0x778>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a2d      	ldr	r2, [pc, #180]	; (80017f0 <HAL_RCC_OscConfig+0x778>)
 800173c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001740:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001742:	f7ff f9b1 	bl	8000aa8 <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800174a:	f7ff f9ad 	bl	8000aa8 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e099      	b.n	8001890 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800175c:	4b24      	ldr	r3, [pc, #144]	; (80017f0 <HAL_RCC_OscConfig+0x778>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d1f0      	bne.n	800174a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001768:	4b21      	ldr	r3, [pc, #132]	; (80017f0 <HAL_RCC_OscConfig+0x778>)
 800176a:	68da      	ldr	r2, [r3, #12]
 800176c:	4b21      	ldr	r3, [pc, #132]	; (80017f4 <HAL_RCC_OscConfig+0x77c>)
 800176e:	4013      	ands	r3, r2
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001778:	3a01      	subs	r2, #1
 800177a:	0112      	lsls	r2, r2, #4
 800177c:	4311      	orrs	r1, r2
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001782:	0212      	lsls	r2, r2, #8
 8001784:	4311      	orrs	r1, r2
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800178a:	0852      	lsrs	r2, r2, #1
 800178c:	3a01      	subs	r2, #1
 800178e:	0552      	lsls	r2, r2, #21
 8001790:	4311      	orrs	r1, r2
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001796:	0852      	lsrs	r2, r2, #1
 8001798:	3a01      	subs	r2, #1
 800179a:	0652      	lsls	r2, r2, #25
 800179c:	4311      	orrs	r1, r2
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80017a2:	06d2      	lsls	r2, r2, #27
 80017a4:	430a      	orrs	r2, r1
 80017a6:	4912      	ldr	r1, [pc, #72]	; (80017f0 <HAL_RCC_OscConfig+0x778>)
 80017a8:	4313      	orrs	r3, r2
 80017aa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80017ac:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <HAL_RCC_OscConfig+0x778>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a0f      	ldr	r2, [pc, #60]	; (80017f0 <HAL_RCC_OscConfig+0x778>)
 80017b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017b6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017b8:	4b0d      	ldr	r3, [pc, #52]	; (80017f0 <HAL_RCC_OscConfig+0x778>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	4a0c      	ldr	r2, [pc, #48]	; (80017f0 <HAL_RCC_OscConfig+0x778>)
 80017be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017c4:	f7ff f970 	bl	8000aa8 <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017cc:	f7ff f96c 	bl	8000aa8 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e058      	b.n	8001890 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017de:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <HAL_RCC_OscConfig+0x778>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d0f0      	beq.n	80017cc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017ea:	e050      	b.n	800188e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e04f      	b.n	8001890 <HAL_RCC_OscConfig+0x818>
 80017f0:	40021000 	.word	0x40021000
 80017f4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017f8:	4b27      	ldr	r3, [pc, #156]	; (8001898 <HAL_RCC_OscConfig+0x820>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d144      	bne.n	800188e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001804:	4b24      	ldr	r3, [pc, #144]	; (8001898 <HAL_RCC_OscConfig+0x820>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a23      	ldr	r2, [pc, #140]	; (8001898 <HAL_RCC_OscConfig+0x820>)
 800180a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800180e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001810:	4b21      	ldr	r3, [pc, #132]	; (8001898 <HAL_RCC_OscConfig+0x820>)
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	4a20      	ldr	r2, [pc, #128]	; (8001898 <HAL_RCC_OscConfig+0x820>)
 8001816:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800181a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800181c:	f7ff f944 	bl	8000aa8 <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001824:	f7ff f940 	bl	8000aa8 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e02c      	b.n	8001890 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001836:	4b18      	ldr	r3, [pc, #96]	; (8001898 <HAL_RCC_OscConfig+0x820>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d0f0      	beq.n	8001824 <HAL_RCC_OscConfig+0x7ac>
 8001842:	e024      	b.n	800188e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	2b0c      	cmp	r3, #12
 8001848:	d01f      	beq.n	800188a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800184a:	4b13      	ldr	r3, [pc, #76]	; (8001898 <HAL_RCC_OscConfig+0x820>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a12      	ldr	r2, [pc, #72]	; (8001898 <HAL_RCC_OscConfig+0x820>)
 8001850:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001854:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001856:	f7ff f927 	bl	8000aa8 <HAL_GetTick>
 800185a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800185c:	e008      	b.n	8001870 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800185e:	f7ff f923 	bl	8000aa8 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e00f      	b.n	8001890 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001870:	4b09      	ldr	r3, [pc, #36]	; (8001898 <HAL_RCC_OscConfig+0x820>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1f0      	bne.n	800185e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <HAL_RCC_OscConfig+0x820>)
 800187e:	68da      	ldr	r2, [r3, #12]
 8001880:	4905      	ldr	r1, [pc, #20]	; (8001898 <HAL_RCC_OscConfig+0x820>)
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <HAL_RCC_OscConfig+0x824>)
 8001884:	4013      	ands	r3, r2
 8001886:	60cb      	str	r3, [r1, #12]
 8001888:	e001      	b.n	800188e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e000      	b.n	8001890 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800188e:	2300      	movs	r3, #0
}
 8001890:	4618      	mov	r0, r3
 8001892:	3720      	adds	r7, #32
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40021000 	.word	0x40021000
 800189c:	feeefffc 	.word	0xfeeefffc

080018a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d101      	bne.n	80018b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e0e7      	b.n	8001a84 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018b4:	4b75      	ldr	r3, [pc, #468]	; (8001a8c <HAL_RCC_ClockConfig+0x1ec>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0307 	and.w	r3, r3, #7
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d910      	bls.n	80018e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c2:	4b72      	ldr	r3, [pc, #456]	; (8001a8c <HAL_RCC_ClockConfig+0x1ec>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f023 0207 	bic.w	r2, r3, #7
 80018ca:	4970      	ldr	r1, [pc, #448]	; (8001a8c <HAL_RCC_ClockConfig+0x1ec>)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018d2:	4b6e      	ldr	r3, [pc, #440]	; (8001a8c <HAL_RCC_ClockConfig+0x1ec>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d001      	beq.n	80018e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e0cf      	b.n	8001a84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d010      	beq.n	8001912 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	4b66      	ldr	r3, [pc, #408]	; (8001a90 <HAL_RCC_ClockConfig+0x1f0>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d908      	bls.n	8001912 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001900:	4b63      	ldr	r3, [pc, #396]	; (8001a90 <HAL_RCC_ClockConfig+0x1f0>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	4960      	ldr	r1, [pc, #384]	; (8001a90 <HAL_RCC_ClockConfig+0x1f0>)
 800190e:	4313      	orrs	r3, r2
 8001910:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	2b00      	cmp	r3, #0
 800191c:	d04c      	beq.n	80019b8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b03      	cmp	r3, #3
 8001924:	d107      	bne.n	8001936 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001926:	4b5a      	ldr	r3, [pc, #360]	; (8001a90 <HAL_RCC_ClockConfig+0x1f0>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d121      	bne.n	8001976 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e0a6      	b.n	8001a84 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b02      	cmp	r3, #2
 800193c:	d107      	bne.n	800194e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800193e:	4b54      	ldr	r3, [pc, #336]	; (8001a90 <HAL_RCC_ClockConfig+0x1f0>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d115      	bne.n	8001976 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e09a      	b.n	8001a84 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d107      	bne.n	8001966 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001956:	4b4e      	ldr	r3, [pc, #312]	; (8001a90 <HAL_RCC_ClockConfig+0x1f0>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d109      	bne.n	8001976 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e08e      	b.n	8001a84 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001966:	4b4a      	ldr	r3, [pc, #296]	; (8001a90 <HAL_RCC_ClockConfig+0x1f0>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800196e:	2b00      	cmp	r3, #0
 8001970:	d101      	bne.n	8001976 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e086      	b.n	8001a84 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001976:	4b46      	ldr	r3, [pc, #280]	; (8001a90 <HAL_RCC_ClockConfig+0x1f0>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f023 0203 	bic.w	r2, r3, #3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	4943      	ldr	r1, [pc, #268]	; (8001a90 <HAL_RCC_ClockConfig+0x1f0>)
 8001984:	4313      	orrs	r3, r2
 8001986:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001988:	f7ff f88e 	bl	8000aa8 <HAL_GetTick>
 800198c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800198e:	e00a      	b.n	80019a6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001990:	f7ff f88a 	bl	8000aa8 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	f241 3288 	movw	r2, #5000	; 0x1388
 800199e:	4293      	cmp	r3, r2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e06e      	b.n	8001a84 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019a6:	4b3a      	ldr	r3, [pc, #232]	; (8001a90 <HAL_RCC_ClockConfig+0x1f0>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f003 020c 	and.w	r2, r3, #12
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d1eb      	bne.n	8001990 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d010      	beq.n	80019e6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	4b31      	ldr	r3, [pc, #196]	; (8001a90 <HAL_RCC_ClockConfig+0x1f0>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d208      	bcs.n	80019e6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019d4:	4b2e      	ldr	r3, [pc, #184]	; (8001a90 <HAL_RCC_ClockConfig+0x1f0>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	492b      	ldr	r1, [pc, #172]	; (8001a90 <HAL_RCC_ClockConfig+0x1f0>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019e6:	4b29      	ldr	r3, [pc, #164]	; (8001a8c <HAL_RCC_ClockConfig+0x1ec>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d210      	bcs.n	8001a16 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f4:	4b25      	ldr	r3, [pc, #148]	; (8001a8c <HAL_RCC_ClockConfig+0x1ec>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f023 0207 	bic.w	r2, r3, #7
 80019fc:	4923      	ldr	r1, [pc, #140]	; (8001a8c <HAL_RCC_ClockConfig+0x1ec>)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a04:	4b21      	ldr	r3, [pc, #132]	; (8001a8c <HAL_RCC_ClockConfig+0x1ec>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0307 	and.w	r3, r3, #7
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d001      	beq.n	8001a16 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e036      	b.n	8001a84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0304 	and.w	r3, r3, #4
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d008      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a22:	4b1b      	ldr	r3, [pc, #108]	; (8001a90 <HAL_RCC_ClockConfig+0x1f0>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	4918      	ldr	r1, [pc, #96]	; (8001a90 <HAL_RCC_ClockConfig+0x1f0>)
 8001a30:	4313      	orrs	r3, r2
 8001a32:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0308 	and.w	r3, r3, #8
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d009      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a40:	4b13      	ldr	r3, [pc, #76]	; (8001a90 <HAL_RCC_ClockConfig+0x1f0>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	691b      	ldr	r3, [r3, #16]
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	4910      	ldr	r1, [pc, #64]	; (8001a90 <HAL_RCC_ClockConfig+0x1f0>)
 8001a50:	4313      	orrs	r3, r2
 8001a52:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a54:	f000 f824 	bl	8001aa0 <HAL_RCC_GetSysClockFreq>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	4b0d      	ldr	r3, [pc, #52]	; (8001a90 <HAL_RCC_ClockConfig+0x1f0>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	091b      	lsrs	r3, r3, #4
 8001a60:	f003 030f 	and.w	r3, r3, #15
 8001a64:	490b      	ldr	r1, [pc, #44]	; (8001a94 <HAL_RCC_ClockConfig+0x1f4>)
 8001a66:	5ccb      	ldrb	r3, [r1, r3]
 8001a68:	f003 031f 	and.w	r3, r3, #31
 8001a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a70:	4a09      	ldr	r2, [pc, #36]	; (8001a98 <HAL_RCC_ClockConfig+0x1f8>)
 8001a72:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a74:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <HAL_RCC_ClockConfig+0x1fc>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7fe ffc5 	bl	8000a08 <HAL_InitTick>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	72fb      	strb	r3, [r7, #11]

  return status;
 8001a82:	7afb      	ldrb	r3, [r7, #11]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40022000 	.word	0x40022000
 8001a90:	40021000 	.word	0x40021000
 8001a94:	08002d1c 	.word	0x08002d1c
 8001a98:	20000000 	.word	0x20000000
 8001a9c:	20000004 	.word	0x20000004

08001aa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b089      	sub	sp, #36	; 0x24
 8001aa4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aae:	4b3e      	ldr	r3, [pc, #248]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f003 030c 	and.w	r3, r3, #12
 8001ab6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ab8:	4b3b      	ldr	r3, [pc, #236]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	f003 0303 	and.w	r3, r3, #3
 8001ac0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d005      	beq.n	8001ad4 <HAL_RCC_GetSysClockFreq+0x34>
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	2b0c      	cmp	r3, #12
 8001acc:	d121      	bne.n	8001b12 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d11e      	bne.n	8001b12 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ad4:	4b34      	ldr	r3, [pc, #208]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0308 	and.w	r3, r3, #8
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d107      	bne.n	8001af0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ae0:	4b31      	ldr	r3, [pc, #196]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ae2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ae6:	0a1b      	lsrs	r3, r3, #8
 8001ae8:	f003 030f 	and.w	r3, r3, #15
 8001aec:	61fb      	str	r3, [r7, #28]
 8001aee:	e005      	b.n	8001afc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001af0:	4b2d      	ldr	r3, [pc, #180]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	091b      	lsrs	r3, r3, #4
 8001af6:	f003 030f 	and.w	r3, r3, #15
 8001afa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001afc:	4a2b      	ldr	r2, [pc, #172]	; (8001bac <HAL_RCC_GetSysClockFreq+0x10c>)
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b04:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d10d      	bne.n	8001b28 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b10:	e00a      	b.n	8001b28 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	2b04      	cmp	r3, #4
 8001b16:	d102      	bne.n	8001b1e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b18:	4b25      	ldr	r3, [pc, #148]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b1a:	61bb      	str	r3, [r7, #24]
 8001b1c:	e004      	b.n	8001b28 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	2b08      	cmp	r3, #8
 8001b22:	d101      	bne.n	8001b28 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b24:	4b23      	ldr	r3, [pc, #140]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b26:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	2b0c      	cmp	r3, #12
 8001b2c:	d134      	bne.n	8001b98 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	f003 0303 	and.w	r3, r3, #3
 8001b36:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d003      	beq.n	8001b46 <HAL_RCC_GetSysClockFreq+0xa6>
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	2b03      	cmp	r3, #3
 8001b42:	d003      	beq.n	8001b4c <HAL_RCC_GetSysClockFreq+0xac>
 8001b44:	e005      	b.n	8001b52 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001b46:	4b1a      	ldr	r3, [pc, #104]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b48:	617b      	str	r3, [r7, #20]
      break;
 8001b4a:	e005      	b.n	8001b58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001b4c:	4b19      	ldr	r3, [pc, #100]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b4e:	617b      	str	r3, [r7, #20]
      break;
 8001b50:	e002      	b.n	8001b58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	617b      	str	r3, [r7, #20]
      break;
 8001b56:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b58:	4b13      	ldr	r3, [pc, #76]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	091b      	lsrs	r3, r3, #4
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	3301      	adds	r3, #1
 8001b64:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001b66:	4b10      	ldr	r3, [pc, #64]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	0a1b      	lsrs	r3, r3, #8
 8001b6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b70:	697a      	ldr	r2, [r7, #20]
 8001b72:	fb03 f202 	mul.w	r2, r3, r2
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b7c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	0e5b      	lsrs	r3, r3, #25
 8001b84:	f003 0303 	and.w	r3, r3, #3
 8001b88:	3301      	adds	r3, #1
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b96:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001b98:	69bb      	ldr	r3, [r7, #24]
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3724      	adds	r7, #36	; 0x24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	08002d34 	.word	0x08002d34
 8001bb0:	00f42400 	.word	0x00f42400
 8001bb4:	007a1200 	.word	0x007a1200

08001bb8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bbc:	4b03      	ldr	r3, [pc, #12]	; (8001bcc <HAL_RCC_GetHCLKFreq+0x14>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	20000000 	.word	0x20000000

08001bd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001bd4:	f7ff fff0 	bl	8001bb8 <HAL_RCC_GetHCLKFreq>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	0a1b      	lsrs	r3, r3, #8
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	4904      	ldr	r1, [pc, #16]	; (8001bf8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001be6:	5ccb      	ldrb	r3, [r1, r3]
 8001be8:	f003 031f 	and.w	r3, r3, #31
 8001bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	08002d2c 	.word	0x08002d2c

08001bfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c00:	f7ff ffda 	bl	8001bb8 <HAL_RCC_GetHCLKFreq>
 8001c04:	4602      	mov	r2, r0
 8001c06:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	0adb      	lsrs	r3, r3, #11
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	4904      	ldr	r1, [pc, #16]	; (8001c24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c12:	5ccb      	ldrb	r3, [r1, r3]
 8001c14:	f003 031f 	and.w	r3, r3, #31
 8001c18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40021000 	.word	0x40021000
 8001c24:	08002d2c 	.word	0x08002d2c

08001c28 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c30:	2300      	movs	r3, #0
 8001c32:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c34:	4b2a      	ldr	r3, [pc, #168]	; (8001ce0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d003      	beq.n	8001c48 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001c40:	f7ff f9b6 	bl	8000fb0 <HAL_PWREx_GetVoltageRange>
 8001c44:	6178      	str	r0, [r7, #20]
 8001c46:	e014      	b.n	8001c72 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c48:	4b25      	ldr	r3, [pc, #148]	; (8001ce0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4c:	4a24      	ldr	r2, [pc, #144]	; (8001ce0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c52:	6593      	str	r3, [r2, #88]	; 0x58
 8001c54:	4b22      	ldr	r3, [pc, #136]	; (8001ce0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001c60:	f7ff f9a6 	bl	8000fb0 <HAL_PWREx_GetVoltageRange>
 8001c64:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001c66:	4b1e      	ldr	r3, [pc, #120]	; (8001ce0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c6a:	4a1d      	ldr	r2, [pc, #116]	; (8001ce0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c70:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c78:	d10b      	bne.n	8001c92 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2b80      	cmp	r3, #128	; 0x80
 8001c7e:	d919      	bls.n	8001cb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2ba0      	cmp	r3, #160	; 0xa0
 8001c84:	d902      	bls.n	8001c8c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c86:	2302      	movs	r3, #2
 8001c88:	613b      	str	r3, [r7, #16]
 8001c8a:	e013      	b.n	8001cb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	613b      	str	r3, [r7, #16]
 8001c90:	e010      	b.n	8001cb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b80      	cmp	r3, #128	; 0x80
 8001c96:	d902      	bls.n	8001c9e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001c98:	2303      	movs	r3, #3
 8001c9a:	613b      	str	r3, [r7, #16]
 8001c9c:	e00a      	b.n	8001cb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2b80      	cmp	r3, #128	; 0x80
 8001ca2:	d102      	bne.n	8001caa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	613b      	str	r3, [r7, #16]
 8001ca8:	e004      	b.n	8001cb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2b70      	cmp	r3, #112	; 0x70
 8001cae:	d101      	bne.n	8001cb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001cb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f023 0207 	bic.w	r2, r3, #7
 8001cbc:	4909      	ldr	r1, [pc, #36]	; (8001ce4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001cc4:	4b07      	ldr	r3, [pc, #28]	; (8001ce4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d001      	beq.n	8001cd6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e000      	b.n	8001cd8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3718      	adds	r7, #24
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	40022000 	.word	0x40022000

08001ce8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d031      	beq.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d08:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001d0c:	d01a      	beq.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001d0e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001d12:	d814      	bhi.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d009      	beq.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001d18:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001d1c:	d10f      	bne.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001d1e:	4b5d      	ldr	r3, [pc, #372]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	4a5c      	ldr	r2, [pc, #368]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d28:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d2a:	e00c      	b.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3304      	adds	r3, #4
 8001d30:	2100      	movs	r1, #0
 8001d32:	4618      	mov	r0, r3
 8001d34:	f000 fa44 	bl	80021c0 <RCCEx_PLLSAI1_Config>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d3c:	e003      	b.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	74fb      	strb	r3, [r7, #19]
      break;
 8001d42:	e000      	b.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001d44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001d46:	7cfb      	ldrb	r3, [r7, #19]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d10b      	bne.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d4c:	4b51      	ldr	r3, [pc, #324]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d52:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d5a:	494e      	ldr	r1, [pc, #312]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001d62:	e001      	b.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d64:	7cfb      	ldrb	r3, [r7, #19]
 8001d66:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f000 809e 	beq.w	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d76:	2300      	movs	r3, #0
 8001d78:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d7a:	4b46      	ldr	r3, [pc, #280]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001d86:	2301      	movs	r3, #1
 8001d88:	e000      	b.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d00d      	beq.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d90:	4b40      	ldr	r3, [pc, #256]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d94:	4a3f      	ldr	r2, [pc, #252]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d9a:	6593      	str	r3, [r2, #88]	; 0x58
 8001d9c:	4b3d      	ldr	r3, [pc, #244]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da4:	60bb      	str	r3, [r7, #8]
 8001da6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001da8:	2301      	movs	r3, #1
 8001daa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dac:	4b3a      	ldr	r3, [pc, #232]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a39      	ldr	r2, [pc, #228]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001db8:	f7fe fe76 	bl	8000aa8 <HAL_GetTick>
 8001dbc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001dbe:	e009      	b.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dc0:	f7fe fe72 	bl	8000aa8 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d902      	bls.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	74fb      	strb	r3, [r7, #19]
        break;
 8001dd2:	e005      	b.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001dd4:	4b30      	ldr	r3, [pc, #192]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d0ef      	beq.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8001de0:	7cfb      	ldrb	r3, [r7, #19]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d15a      	bne.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001de6:	4b2b      	ldr	r3, [pc, #172]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001df0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d01e      	beq.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001dfc:	697a      	ldr	r2, [r7, #20]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d019      	beq.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e02:	4b24      	ldr	r3, [pc, #144]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e0c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e0e:	4b21      	ldr	r3, [pc, #132]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e14:	4a1f      	ldr	r2, [pc, #124]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e1e:	4b1d      	ldr	r3, [pc, #116]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e24:	4a1b      	ldr	r2, [pc, #108]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e2e:	4a19      	ldr	r2, [pc, #100]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d016      	beq.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e40:	f7fe fe32 	bl	8000aa8 <HAL_GetTick>
 8001e44:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e46:	e00b      	b.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e48:	f7fe fe2e 	bl	8000aa8 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d902      	bls.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	74fb      	strb	r3, [r7, #19]
            break;
 8001e5e:	e006      	b.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e60:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d0ec      	beq.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8001e6e:	7cfb      	ldrb	r3, [r7, #19]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d10b      	bne.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e74:	4b07      	ldr	r3, [pc, #28]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e7a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e82:	4904      	ldr	r1, [pc, #16]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001e8a:	e009      	b.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e8c:	7cfb      	ldrb	r3, [r7, #19]
 8001e8e:	74bb      	strb	r3, [r7, #18]
 8001e90:	e006      	b.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8001e92:	bf00      	nop
 8001e94:	40021000 	.word	0x40021000
 8001e98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e9c:	7cfb      	ldrb	r3, [r7, #19]
 8001e9e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ea0:	7c7b      	ldrb	r3, [r7, #17]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d105      	bne.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ea6:	4b9e      	ldr	r3, [pc, #632]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eaa:	4a9d      	ldr	r2, [pc, #628]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001eac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eb0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00a      	beq.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ebe:	4b98      	ldr	r3, [pc, #608]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ec4:	f023 0203 	bic.w	r2, r3, #3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	4994      	ldr	r1, [pc, #592]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d00a      	beq.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ee0:	4b8f      	ldr	r3, [pc, #572]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ee6:	f023 020c 	bic.w	r2, r3, #12
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eee:	498c      	ldr	r1, [pc, #560]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0304 	and.w	r3, r3, #4
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00a      	beq.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f02:	4b87      	ldr	r3, [pc, #540]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f08:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f10:	4983      	ldr	r1, [pc, #524]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0308 	and.w	r3, r3, #8
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d00a      	beq.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f24:	4b7e      	ldr	r3, [pc, #504]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f2a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f32:	497b      	ldr	r1, [pc, #492]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001f34:	4313      	orrs	r3, r2
 8001f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0320 	and.w	r3, r3, #32
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00a      	beq.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f46:	4b76      	ldr	r3, [pc, #472]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f4c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f54:	4972      	ldr	r1, [pc, #456]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d00a      	beq.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f68:	4b6d      	ldr	r3, [pc, #436]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f6e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f76:	496a      	ldr	r1, [pc, #424]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d00a      	beq.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001f8a:	4b65      	ldr	r3, [pc, #404]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f98:	4961      	ldr	r1, [pc, #388]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d00a      	beq.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fac:	4b5c      	ldr	r3, [pc, #368]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fb2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fba:	4959      	ldr	r1, [pc, #356]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00a      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001fce:	4b54      	ldr	r3, [pc, #336]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fd4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fdc:	4950      	ldr	r1, [pc, #320]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d00a      	beq.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001ff0:	4b4b      	ldr	r3, [pc, #300]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ff6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ffe:	4948      	ldr	r1, [pc, #288]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002000:	4313      	orrs	r3, r2
 8002002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d00a      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002012:	4b43      	ldr	r3, [pc, #268]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002014:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002018:	f023 0203 	bic.w	r2, r3, #3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002020:	493f      	ldr	r1, [pc, #252]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002022:	4313      	orrs	r3, r2
 8002024:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d028      	beq.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002034:	4b3a      	ldr	r3, [pc, #232]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800203a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002042:	4937      	ldr	r1, [pc, #220]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002044:	4313      	orrs	r3, r2
 8002046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800204e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002052:	d106      	bne.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002054:	4b32      	ldr	r3, [pc, #200]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	4a31      	ldr	r2, [pc, #196]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800205a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800205e:	60d3      	str	r3, [r2, #12]
 8002060:	e011      	b.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002066:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800206a:	d10c      	bne.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3304      	adds	r3, #4
 8002070:	2101      	movs	r1, #1
 8002072:	4618      	mov	r0, r3
 8002074:	f000 f8a4 	bl	80021c0 <RCCEx_PLLSAI1_Config>
 8002078:	4603      	mov	r3, r0
 800207a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800207c:	7cfb      	ldrb	r3, [r7, #19]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8002082:	7cfb      	ldrb	r3, [r7, #19]
 8002084:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d028      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002092:	4b23      	ldr	r3, [pc, #140]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002098:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a0:	491f      	ldr	r1, [pc, #124]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020b0:	d106      	bne.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020b2:	4b1b      	ldr	r3, [pc, #108]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	4a1a      	ldr	r2, [pc, #104]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80020b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020bc:	60d3      	str	r3, [r2, #12]
 80020be:	e011      	b.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80020c8:	d10c      	bne.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	3304      	adds	r3, #4
 80020ce:	2101      	movs	r1, #1
 80020d0:	4618      	mov	r0, r3
 80020d2:	f000 f875 	bl	80021c0 <RCCEx_PLLSAI1_Config>
 80020d6:	4603      	mov	r3, r0
 80020d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80020da:	7cfb      	ldrb	r3, [r7, #19]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 80020e0:	7cfb      	ldrb	r3, [r7, #19]
 80020e2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d02b      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80020f0:	4b0b      	ldr	r3, [pc, #44]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80020f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fe:	4908      	ldr	r1, [pc, #32]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002100:	4313      	orrs	r3, r2
 8002102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800210e:	d109      	bne.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002110:	4b03      	ldr	r3, [pc, #12]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	4a02      	ldr	r2, [pc, #8]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002116:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800211a:	60d3      	str	r3, [r2, #12]
 800211c:	e014      	b.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x460>
 800211e:	bf00      	nop
 8002120:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002128:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800212c:	d10c      	bne.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	3304      	adds	r3, #4
 8002132:	2101      	movs	r1, #1
 8002134:	4618      	mov	r0, r3
 8002136:	f000 f843 	bl	80021c0 <RCCEx_PLLSAI1_Config>
 800213a:	4603      	mov	r3, r0
 800213c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800213e:	7cfb      	ldrb	r3, [r7, #19]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8002144:	7cfb      	ldrb	r3, [r7, #19]
 8002146:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d01c      	beq.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002154:	4b19      	ldr	r3, [pc, #100]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800215a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002162:	4916      	ldr	r1, [pc, #88]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002164:	4313      	orrs	r3, r2
 8002166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002172:	d10c      	bne.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3304      	adds	r3, #4
 8002178:	2102      	movs	r1, #2
 800217a:	4618      	mov	r0, r3
 800217c:	f000 f820 	bl	80021c0 <RCCEx_PLLSAI1_Config>
 8002180:	4603      	mov	r3, r0
 8002182:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002184:	7cfb      	ldrb	r3, [r7, #19]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 800218a:	7cfb      	ldrb	r3, [r7, #19]
 800218c:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00a      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800219a:	4b08      	ldr	r3, [pc, #32]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800219c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021a8:	4904      	ldr	r1, [pc, #16]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80021b0:	7cbb      	ldrb	r3, [r7, #18]
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3718      	adds	r7, #24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40021000 	.word	0x40021000

080021c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80021ca:	2300      	movs	r3, #0
 80021cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80021ce:	4b74      	ldr	r3, [pc, #464]	; (80023a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	f003 0303 	and.w	r3, r3, #3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d018      	beq.n	800220c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80021da:	4b71      	ldr	r3, [pc, #452]	; (80023a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	f003 0203 	and.w	r2, r3, #3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d10d      	bne.n	8002206 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
       ||
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d009      	beq.n	8002206 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80021f2:	4b6b      	ldr	r3, [pc, #428]	; (80023a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	091b      	lsrs	r3, r3, #4
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	1c5a      	adds	r2, r3, #1
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
       ||
 8002202:	429a      	cmp	r2, r3
 8002204:	d047      	beq.n	8002296 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	73fb      	strb	r3, [r7, #15]
 800220a:	e044      	b.n	8002296 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2b03      	cmp	r3, #3
 8002212:	d018      	beq.n	8002246 <RCCEx_PLLSAI1_Config+0x86>
 8002214:	2b03      	cmp	r3, #3
 8002216:	d825      	bhi.n	8002264 <RCCEx_PLLSAI1_Config+0xa4>
 8002218:	2b01      	cmp	r3, #1
 800221a:	d002      	beq.n	8002222 <RCCEx_PLLSAI1_Config+0x62>
 800221c:	2b02      	cmp	r3, #2
 800221e:	d009      	beq.n	8002234 <RCCEx_PLLSAI1_Config+0x74>
 8002220:	e020      	b.n	8002264 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002222:	4b5f      	ldr	r3, [pc, #380]	; (80023a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d11d      	bne.n	800226a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002232:	e01a      	b.n	800226a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002234:	4b5a      	ldr	r3, [pc, #360]	; (80023a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800223c:	2b00      	cmp	r3, #0
 800223e:	d116      	bne.n	800226e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002244:	e013      	b.n	800226e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002246:	4b56      	ldr	r3, [pc, #344]	; (80023a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10f      	bne.n	8002272 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002252:	4b53      	ldr	r3, [pc, #332]	; (80023a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d109      	bne.n	8002272 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002262:	e006      	b.n	8002272 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	73fb      	strb	r3, [r7, #15]
      break;
 8002268:	e004      	b.n	8002274 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800226a:	bf00      	nop
 800226c:	e002      	b.n	8002274 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800226e:	bf00      	nop
 8002270:	e000      	b.n	8002274 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002272:	bf00      	nop
    }

    if(status == HAL_OK)
 8002274:	7bfb      	ldrb	r3, [r7, #15]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d10d      	bne.n	8002296 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800227a:	4b49      	ldr	r3, [pc, #292]	; (80023a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6819      	ldr	r1, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	3b01      	subs	r3, #1
 800228c:	011b      	lsls	r3, r3, #4
 800228e:	430b      	orrs	r3, r1
 8002290:	4943      	ldr	r1, [pc, #268]	; (80023a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002292:	4313      	orrs	r3, r2
 8002294:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002296:	7bfb      	ldrb	r3, [r7, #15]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d17c      	bne.n	8002396 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800229c:	4b40      	ldr	r3, [pc, #256]	; (80023a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a3f      	ldr	r2, [pc, #252]	; (80023a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80022a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022a8:	f7fe fbfe 	bl	8000aa8 <HAL_GetTick>
 80022ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80022ae:	e009      	b.n	80022c4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80022b0:	f7fe fbfa 	bl	8000aa8 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d902      	bls.n	80022c4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	73fb      	strb	r3, [r7, #15]
        break;
 80022c2:	e005      	b.n	80022d0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80022c4:	4b36      	ldr	r3, [pc, #216]	; (80023a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d1ef      	bne.n	80022b0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d15f      	bne.n	8002396 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d110      	bne.n	80022fe <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80022dc:	4b30      	ldr	r3, [pc, #192]	; (80023a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80022e4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	6892      	ldr	r2, [r2, #8]
 80022ec:	0211      	lsls	r1, r2, #8
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	68d2      	ldr	r2, [r2, #12]
 80022f2:	06d2      	lsls	r2, r2, #27
 80022f4:	430a      	orrs	r2, r1
 80022f6:	492a      	ldr	r1, [pc, #168]	; (80023a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	610b      	str	r3, [r1, #16]
 80022fc:	e027      	b.n	800234e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d112      	bne.n	800232a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002304:	4b26      	ldr	r3, [pc, #152]	; (80023a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800230c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	6892      	ldr	r2, [r2, #8]
 8002314:	0211      	lsls	r1, r2, #8
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	6912      	ldr	r2, [r2, #16]
 800231a:	0852      	lsrs	r2, r2, #1
 800231c:	3a01      	subs	r2, #1
 800231e:	0552      	lsls	r2, r2, #21
 8002320:	430a      	orrs	r2, r1
 8002322:	491f      	ldr	r1, [pc, #124]	; (80023a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002324:	4313      	orrs	r3, r2
 8002326:	610b      	str	r3, [r1, #16]
 8002328:	e011      	b.n	800234e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800232a:	4b1d      	ldr	r3, [pc, #116]	; (80023a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002332:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	6892      	ldr	r2, [r2, #8]
 800233a:	0211      	lsls	r1, r2, #8
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	6952      	ldr	r2, [r2, #20]
 8002340:	0852      	lsrs	r2, r2, #1
 8002342:	3a01      	subs	r2, #1
 8002344:	0652      	lsls	r2, r2, #25
 8002346:	430a      	orrs	r2, r1
 8002348:	4915      	ldr	r1, [pc, #84]	; (80023a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800234a:	4313      	orrs	r3, r2
 800234c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800234e:	4b14      	ldr	r3, [pc, #80]	; (80023a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a13      	ldr	r2, [pc, #76]	; (80023a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002354:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002358:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800235a:	f7fe fba5 	bl	8000aa8 <HAL_GetTick>
 800235e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002360:	e009      	b.n	8002376 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002362:	f7fe fba1 	bl	8000aa8 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d902      	bls.n	8002376 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	73fb      	strb	r3, [r7, #15]
          break;
 8002374:	e005      	b.n	8002382 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002376:	4b0a      	ldr	r3, [pc, #40]	; (80023a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d0ef      	beq.n	8002362 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002382:	7bfb      	ldrb	r3, [r7, #15]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d106      	bne.n	8002396 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002388:	4b05      	ldr	r3, [pc, #20]	; (80023a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800238a:	691a      	ldr	r2, [r3, #16]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	4903      	ldr	r1, [pc, #12]	; (80023a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002392:	4313      	orrs	r3, r2
 8002394:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002396:	7bfb      	ldrb	r3, [r7, #15]
}
 8002398:	4618      	mov	r0, r3
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40021000 	.word	0x40021000

080023a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e040      	b.n	8002438 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d106      	bne.n	80023cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7fe f9d4 	bl	8000774 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2224      	movs	r2, #36	; 0x24
 80023d0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f022 0201 	bic.w	r2, r2, #1
 80023e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 f82c 	bl	8002440 <UART_SetConfig>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d101      	bne.n	80023f2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e022      	b.n	8002438 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d002      	beq.n	8002400 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 faa6 	bl	800294c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	685a      	ldr	r2, [r3, #4]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800240e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	689a      	ldr	r2, [r3, #8]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800241e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f042 0201 	orr.w	r2, r2, #1
 800242e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f000 fb2d 	bl	8002a90 <UART_CheckIdleState>
 8002436:	4603      	mov	r3, r0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002440:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002444:	b08a      	sub	sp, #40	; 0x28
 8002446:	af00      	add	r7, sp, #0
 8002448:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800244a:	2300      	movs	r3, #0
 800244c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	431a      	orrs	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	431a      	orrs	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	69db      	ldr	r3, [r3, #28]
 8002464:	4313      	orrs	r3, r2
 8002466:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	4ba5      	ldr	r3, [pc, #660]	; (8002704 <UART_SetConfig+0x2c4>)
 8002470:	4013      	ands	r3, r2
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	6812      	ldr	r2, [r2, #0]
 8002476:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002478:	430b      	orrs	r3, r1
 800247a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	68da      	ldr	r2, [r3, #12]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	430a      	orrs	r2, r1
 8002490:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a9a      	ldr	r2, [pc, #616]	; (8002708 <UART_SetConfig+0x2c8>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d004      	beq.n	80024ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6a1b      	ldr	r3, [r3, #32]
 80024a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024a8:	4313      	orrs	r3, r2
 80024aa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024bc:	430a      	orrs	r2, r1
 80024be:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a91      	ldr	r2, [pc, #580]	; (800270c <UART_SetConfig+0x2cc>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d126      	bne.n	8002518 <UART_SetConfig+0xd8>
 80024ca:	4b91      	ldr	r3, [pc, #580]	; (8002710 <UART_SetConfig+0x2d0>)
 80024cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d0:	f003 0303 	and.w	r3, r3, #3
 80024d4:	2b03      	cmp	r3, #3
 80024d6:	d81b      	bhi.n	8002510 <UART_SetConfig+0xd0>
 80024d8:	a201      	add	r2, pc, #4	; (adr r2, 80024e0 <UART_SetConfig+0xa0>)
 80024da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024de:	bf00      	nop
 80024e0:	080024f1 	.word	0x080024f1
 80024e4:	08002501 	.word	0x08002501
 80024e8:	080024f9 	.word	0x080024f9
 80024ec:	08002509 	.word	0x08002509
 80024f0:	2301      	movs	r3, #1
 80024f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80024f6:	e0d6      	b.n	80026a6 <UART_SetConfig+0x266>
 80024f8:	2302      	movs	r3, #2
 80024fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80024fe:	e0d2      	b.n	80026a6 <UART_SetConfig+0x266>
 8002500:	2304      	movs	r3, #4
 8002502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002506:	e0ce      	b.n	80026a6 <UART_SetConfig+0x266>
 8002508:	2308      	movs	r3, #8
 800250a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800250e:	e0ca      	b.n	80026a6 <UART_SetConfig+0x266>
 8002510:	2310      	movs	r3, #16
 8002512:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002516:	e0c6      	b.n	80026a6 <UART_SetConfig+0x266>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a7d      	ldr	r2, [pc, #500]	; (8002714 <UART_SetConfig+0x2d4>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d138      	bne.n	8002594 <UART_SetConfig+0x154>
 8002522:	4b7b      	ldr	r3, [pc, #492]	; (8002710 <UART_SetConfig+0x2d0>)
 8002524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002528:	f003 030c 	and.w	r3, r3, #12
 800252c:	2b0c      	cmp	r3, #12
 800252e:	d82d      	bhi.n	800258c <UART_SetConfig+0x14c>
 8002530:	a201      	add	r2, pc, #4	; (adr r2, 8002538 <UART_SetConfig+0xf8>)
 8002532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002536:	bf00      	nop
 8002538:	0800256d 	.word	0x0800256d
 800253c:	0800258d 	.word	0x0800258d
 8002540:	0800258d 	.word	0x0800258d
 8002544:	0800258d 	.word	0x0800258d
 8002548:	0800257d 	.word	0x0800257d
 800254c:	0800258d 	.word	0x0800258d
 8002550:	0800258d 	.word	0x0800258d
 8002554:	0800258d 	.word	0x0800258d
 8002558:	08002575 	.word	0x08002575
 800255c:	0800258d 	.word	0x0800258d
 8002560:	0800258d 	.word	0x0800258d
 8002564:	0800258d 	.word	0x0800258d
 8002568:	08002585 	.word	0x08002585
 800256c:	2300      	movs	r3, #0
 800256e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002572:	e098      	b.n	80026a6 <UART_SetConfig+0x266>
 8002574:	2302      	movs	r3, #2
 8002576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800257a:	e094      	b.n	80026a6 <UART_SetConfig+0x266>
 800257c:	2304      	movs	r3, #4
 800257e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002582:	e090      	b.n	80026a6 <UART_SetConfig+0x266>
 8002584:	2308      	movs	r3, #8
 8002586:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800258a:	e08c      	b.n	80026a6 <UART_SetConfig+0x266>
 800258c:	2310      	movs	r3, #16
 800258e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002592:	e088      	b.n	80026a6 <UART_SetConfig+0x266>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a5f      	ldr	r2, [pc, #380]	; (8002718 <UART_SetConfig+0x2d8>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d125      	bne.n	80025ea <UART_SetConfig+0x1aa>
 800259e:	4b5c      	ldr	r3, [pc, #368]	; (8002710 <UART_SetConfig+0x2d0>)
 80025a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80025a8:	2b30      	cmp	r3, #48	; 0x30
 80025aa:	d016      	beq.n	80025da <UART_SetConfig+0x19a>
 80025ac:	2b30      	cmp	r3, #48	; 0x30
 80025ae:	d818      	bhi.n	80025e2 <UART_SetConfig+0x1a2>
 80025b0:	2b20      	cmp	r3, #32
 80025b2:	d00a      	beq.n	80025ca <UART_SetConfig+0x18a>
 80025b4:	2b20      	cmp	r3, #32
 80025b6:	d814      	bhi.n	80025e2 <UART_SetConfig+0x1a2>
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d002      	beq.n	80025c2 <UART_SetConfig+0x182>
 80025bc:	2b10      	cmp	r3, #16
 80025be:	d008      	beq.n	80025d2 <UART_SetConfig+0x192>
 80025c0:	e00f      	b.n	80025e2 <UART_SetConfig+0x1a2>
 80025c2:	2300      	movs	r3, #0
 80025c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80025c8:	e06d      	b.n	80026a6 <UART_SetConfig+0x266>
 80025ca:	2302      	movs	r3, #2
 80025cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80025d0:	e069      	b.n	80026a6 <UART_SetConfig+0x266>
 80025d2:	2304      	movs	r3, #4
 80025d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80025d8:	e065      	b.n	80026a6 <UART_SetConfig+0x266>
 80025da:	2308      	movs	r3, #8
 80025dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80025e0:	e061      	b.n	80026a6 <UART_SetConfig+0x266>
 80025e2:	2310      	movs	r3, #16
 80025e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80025e8:	e05d      	b.n	80026a6 <UART_SetConfig+0x266>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a4b      	ldr	r2, [pc, #300]	; (800271c <UART_SetConfig+0x2dc>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d125      	bne.n	8002640 <UART_SetConfig+0x200>
 80025f4:	4b46      	ldr	r3, [pc, #280]	; (8002710 <UART_SetConfig+0x2d0>)
 80025f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80025fe:	2bc0      	cmp	r3, #192	; 0xc0
 8002600:	d016      	beq.n	8002630 <UART_SetConfig+0x1f0>
 8002602:	2bc0      	cmp	r3, #192	; 0xc0
 8002604:	d818      	bhi.n	8002638 <UART_SetConfig+0x1f8>
 8002606:	2b80      	cmp	r3, #128	; 0x80
 8002608:	d00a      	beq.n	8002620 <UART_SetConfig+0x1e0>
 800260a:	2b80      	cmp	r3, #128	; 0x80
 800260c:	d814      	bhi.n	8002638 <UART_SetConfig+0x1f8>
 800260e:	2b00      	cmp	r3, #0
 8002610:	d002      	beq.n	8002618 <UART_SetConfig+0x1d8>
 8002612:	2b40      	cmp	r3, #64	; 0x40
 8002614:	d008      	beq.n	8002628 <UART_SetConfig+0x1e8>
 8002616:	e00f      	b.n	8002638 <UART_SetConfig+0x1f8>
 8002618:	2300      	movs	r3, #0
 800261a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800261e:	e042      	b.n	80026a6 <UART_SetConfig+0x266>
 8002620:	2302      	movs	r3, #2
 8002622:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002626:	e03e      	b.n	80026a6 <UART_SetConfig+0x266>
 8002628:	2304      	movs	r3, #4
 800262a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800262e:	e03a      	b.n	80026a6 <UART_SetConfig+0x266>
 8002630:	2308      	movs	r3, #8
 8002632:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002636:	e036      	b.n	80026a6 <UART_SetConfig+0x266>
 8002638:	2310      	movs	r3, #16
 800263a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800263e:	e032      	b.n	80026a6 <UART_SetConfig+0x266>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a30      	ldr	r2, [pc, #192]	; (8002708 <UART_SetConfig+0x2c8>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d12a      	bne.n	80026a0 <UART_SetConfig+0x260>
 800264a:	4b31      	ldr	r3, [pc, #196]	; (8002710 <UART_SetConfig+0x2d0>)
 800264c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002650:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002654:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002658:	d01a      	beq.n	8002690 <UART_SetConfig+0x250>
 800265a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800265e:	d81b      	bhi.n	8002698 <UART_SetConfig+0x258>
 8002660:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002664:	d00c      	beq.n	8002680 <UART_SetConfig+0x240>
 8002666:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800266a:	d815      	bhi.n	8002698 <UART_SetConfig+0x258>
 800266c:	2b00      	cmp	r3, #0
 800266e:	d003      	beq.n	8002678 <UART_SetConfig+0x238>
 8002670:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002674:	d008      	beq.n	8002688 <UART_SetConfig+0x248>
 8002676:	e00f      	b.n	8002698 <UART_SetConfig+0x258>
 8002678:	2300      	movs	r3, #0
 800267a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800267e:	e012      	b.n	80026a6 <UART_SetConfig+0x266>
 8002680:	2302      	movs	r3, #2
 8002682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002686:	e00e      	b.n	80026a6 <UART_SetConfig+0x266>
 8002688:	2304      	movs	r3, #4
 800268a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800268e:	e00a      	b.n	80026a6 <UART_SetConfig+0x266>
 8002690:	2308      	movs	r3, #8
 8002692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002696:	e006      	b.n	80026a6 <UART_SetConfig+0x266>
 8002698:	2310      	movs	r3, #16
 800269a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800269e:	e002      	b.n	80026a6 <UART_SetConfig+0x266>
 80026a0:	2310      	movs	r3, #16
 80026a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a17      	ldr	r2, [pc, #92]	; (8002708 <UART_SetConfig+0x2c8>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	f040 808b 	bne.w	80027c8 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80026b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80026b6:	2b08      	cmp	r3, #8
 80026b8:	d834      	bhi.n	8002724 <UART_SetConfig+0x2e4>
 80026ba:	a201      	add	r2, pc, #4	; (adr r2, 80026c0 <UART_SetConfig+0x280>)
 80026bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026c0:	080026e5 	.word	0x080026e5
 80026c4:	08002725 	.word	0x08002725
 80026c8:	080026ed 	.word	0x080026ed
 80026cc:	08002725 	.word	0x08002725
 80026d0:	080026f3 	.word	0x080026f3
 80026d4:	08002725 	.word	0x08002725
 80026d8:	08002725 	.word	0x08002725
 80026dc:	08002725 	.word	0x08002725
 80026e0:	080026fb 	.word	0x080026fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026e4:	f7ff fa74 	bl	8001bd0 <HAL_RCC_GetPCLK1Freq>
 80026e8:	61f8      	str	r0, [r7, #28]
        break;
 80026ea:	e021      	b.n	8002730 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80026ec:	4b0c      	ldr	r3, [pc, #48]	; (8002720 <UART_SetConfig+0x2e0>)
 80026ee:	61fb      	str	r3, [r7, #28]
        break;
 80026f0:	e01e      	b.n	8002730 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80026f2:	f7ff f9d5 	bl	8001aa0 <HAL_RCC_GetSysClockFreq>
 80026f6:	61f8      	str	r0, [r7, #28]
        break;
 80026f8:	e01a      	b.n	8002730 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026fe:	61fb      	str	r3, [r7, #28]
        break;
 8002700:	e016      	b.n	8002730 <UART_SetConfig+0x2f0>
 8002702:	bf00      	nop
 8002704:	efff69f3 	.word	0xefff69f3
 8002708:	40008000 	.word	0x40008000
 800270c:	40013800 	.word	0x40013800
 8002710:	40021000 	.word	0x40021000
 8002714:	40004400 	.word	0x40004400
 8002718:	40004800 	.word	0x40004800
 800271c:	40004c00 	.word	0x40004c00
 8002720:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002724:	2300      	movs	r3, #0
 8002726:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800272e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	2b00      	cmp	r3, #0
 8002734:	f000 80fa 	beq.w	800292c <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	685a      	ldr	r2, [r3, #4]
 800273c:	4613      	mov	r3, r2
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	4413      	add	r3, r2
 8002742:	69fa      	ldr	r2, [r7, #28]
 8002744:	429a      	cmp	r2, r3
 8002746:	d305      	bcc.n	8002754 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800274e:	69fa      	ldr	r2, [r7, #28]
 8002750:	429a      	cmp	r2, r3
 8002752:	d903      	bls.n	800275c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800275a:	e0e7      	b.n	800292c <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	2200      	movs	r2, #0
 8002760:	461c      	mov	r4, r3
 8002762:	4615      	mov	r5, r2
 8002764:	f04f 0200 	mov.w	r2, #0
 8002768:	f04f 0300 	mov.w	r3, #0
 800276c:	022b      	lsls	r3, r5, #8
 800276e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002772:	0222      	lsls	r2, r4, #8
 8002774:	68f9      	ldr	r1, [r7, #12]
 8002776:	6849      	ldr	r1, [r1, #4]
 8002778:	0849      	lsrs	r1, r1, #1
 800277a:	2000      	movs	r0, #0
 800277c:	4688      	mov	r8, r1
 800277e:	4681      	mov	r9, r0
 8002780:	eb12 0a08 	adds.w	sl, r2, r8
 8002784:	eb43 0b09 	adc.w	fp, r3, r9
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	603b      	str	r3, [r7, #0]
 8002790:	607a      	str	r2, [r7, #4]
 8002792:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002796:	4650      	mov	r0, sl
 8002798:	4659      	mov	r1, fp
 800279a:	f7fd fd1b 	bl	80001d4 <__aeabi_uldivmod>
 800279e:	4602      	mov	r2, r0
 80027a0:	460b      	mov	r3, r1
 80027a2:	4613      	mov	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027ac:	d308      	bcc.n	80027c0 <UART_SetConfig+0x380>
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027b4:	d204      	bcs.n	80027c0 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	60da      	str	r2, [r3, #12]
 80027be:	e0b5      	b.n	800292c <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80027c6:	e0b1      	b.n	800292c <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	69db      	ldr	r3, [r3, #28]
 80027cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027d0:	d15d      	bne.n	800288e <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 80027d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80027d6:	2b08      	cmp	r3, #8
 80027d8:	d827      	bhi.n	800282a <UART_SetConfig+0x3ea>
 80027da:	a201      	add	r2, pc, #4	; (adr r2, 80027e0 <UART_SetConfig+0x3a0>)
 80027dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027e0:	08002805 	.word	0x08002805
 80027e4:	0800280d 	.word	0x0800280d
 80027e8:	08002815 	.word	0x08002815
 80027ec:	0800282b 	.word	0x0800282b
 80027f0:	0800281b 	.word	0x0800281b
 80027f4:	0800282b 	.word	0x0800282b
 80027f8:	0800282b 	.word	0x0800282b
 80027fc:	0800282b 	.word	0x0800282b
 8002800:	08002823 	.word	0x08002823
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002804:	f7ff f9e4 	bl	8001bd0 <HAL_RCC_GetPCLK1Freq>
 8002808:	61f8      	str	r0, [r7, #28]
        break;
 800280a:	e014      	b.n	8002836 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800280c:	f7ff f9f6 	bl	8001bfc <HAL_RCC_GetPCLK2Freq>
 8002810:	61f8      	str	r0, [r7, #28]
        break;
 8002812:	e010      	b.n	8002836 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002814:	4b4c      	ldr	r3, [pc, #304]	; (8002948 <UART_SetConfig+0x508>)
 8002816:	61fb      	str	r3, [r7, #28]
        break;
 8002818:	e00d      	b.n	8002836 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800281a:	f7ff f941 	bl	8001aa0 <HAL_RCC_GetSysClockFreq>
 800281e:	61f8      	str	r0, [r7, #28]
        break;
 8002820:	e009      	b.n	8002836 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002822:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002826:	61fb      	str	r3, [r7, #28]
        break;
 8002828:	e005      	b.n	8002836 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 800282a:	2300      	movs	r3, #0
 800282c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002834:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d077      	beq.n	800292c <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	005a      	lsls	r2, r3, #1
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	085b      	lsrs	r3, r3, #1
 8002846:	441a      	add	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002850:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	2b0f      	cmp	r3, #15
 8002856:	d916      	bls.n	8002886 <UART_SetConfig+0x446>
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800285e:	d212      	bcs.n	8002886 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	b29b      	uxth	r3, r3
 8002864:	f023 030f 	bic.w	r3, r3, #15
 8002868:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	085b      	lsrs	r3, r3, #1
 800286e:	b29b      	uxth	r3, r3
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	b29a      	uxth	r2, r3
 8002876:	8afb      	ldrh	r3, [r7, #22]
 8002878:	4313      	orrs	r3, r2
 800287a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	8afa      	ldrh	r2, [r7, #22]
 8002882:	60da      	str	r2, [r3, #12]
 8002884:	e052      	b.n	800292c <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800288c:	e04e      	b.n	800292c <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 800288e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002892:	2b08      	cmp	r3, #8
 8002894:	d827      	bhi.n	80028e6 <UART_SetConfig+0x4a6>
 8002896:	a201      	add	r2, pc, #4	; (adr r2, 800289c <UART_SetConfig+0x45c>)
 8002898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800289c:	080028c1 	.word	0x080028c1
 80028a0:	080028c9 	.word	0x080028c9
 80028a4:	080028d1 	.word	0x080028d1
 80028a8:	080028e7 	.word	0x080028e7
 80028ac:	080028d7 	.word	0x080028d7
 80028b0:	080028e7 	.word	0x080028e7
 80028b4:	080028e7 	.word	0x080028e7
 80028b8:	080028e7 	.word	0x080028e7
 80028bc:	080028df 	.word	0x080028df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028c0:	f7ff f986 	bl	8001bd0 <HAL_RCC_GetPCLK1Freq>
 80028c4:	61f8      	str	r0, [r7, #28]
        break;
 80028c6:	e014      	b.n	80028f2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80028c8:	f7ff f998 	bl	8001bfc <HAL_RCC_GetPCLK2Freq>
 80028cc:	61f8      	str	r0, [r7, #28]
        break;
 80028ce:	e010      	b.n	80028f2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80028d0:	4b1d      	ldr	r3, [pc, #116]	; (8002948 <UART_SetConfig+0x508>)
 80028d2:	61fb      	str	r3, [r7, #28]
        break;
 80028d4:	e00d      	b.n	80028f2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028d6:	f7ff f8e3 	bl	8001aa0 <HAL_RCC_GetSysClockFreq>
 80028da:	61f8      	str	r0, [r7, #28]
        break;
 80028dc:	e009      	b.n	80028f2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028e2:	61fb      	str	r3, [r7, #28]
        break;
 80028e4:	e005      	b.n	80028f2 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 80028e6:	2300      	movs	r3, #0
 80028e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80028f0:	bf00      	nop
    }

    if (pclk != 0U)
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d019      	beq.n	800292c <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	085a      	lsrs	r2, r3, #1
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	441a      	add	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	fbb2 f3f3 	udiv	r3, r2, r3
 800290a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	2b0f      	cmp	r3, #15
 8002910:	d909      	bls.n	8002926 <UART_SetConfig+0x4e6>
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002918:	d205      	bcs.n	8002926 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	b29a      	uxth	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	60da      	str	r2, [r3, #12]
 8002924:	e002      	b.n	800292c <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002938:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800293c:	4618      	mov	r0, r3
 800293e:	3728      	adds	r7, #40	; 0x28
 8002940:	46bd      	mov	sp, r7
 8002942:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002946:	bf00      	nop
 8002948:	00f42400 	.word	0x00f42400

0800294c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00a      	beq.n	8002976 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	430a      	orrs	r2, r1
 8002974:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00a      	beq.n	8002998 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	430a      	orrs	r2, r1
 8002996:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	f003 0304 	and.w	r3, r3, #4
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00a      	beq.n	80029ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	430a      	orrs	r2, r1
 80029b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029be:	f003 0308 	and.w	r3, r3, #8
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00a      	beq.n	80029dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	430a      	orrs	r2, r1
 80029da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e0:	f003 0310 	and.w	r3, r3, #16
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d00a      	beq.n	80029fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	430a      	orrs	r2, r1
 80029fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a02:	f003 0320 	and.w	r3, r3, #32
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00a      	beq.n	8002a20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d01a      	beq.n	8002a62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a4a:	d10a      	bne.n	8002a62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00a      	beq.n	8002a84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	430a      	orrs	r2, r1
 8002a82:	605a      	str	r2, [r3, #4]
  }
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af02      	add	r7, sp, #8
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002aa0:	f7fe f802 	bl	8000aa8 <HAL_GetTick>
 8002aa4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0308 	and.w	r3, r3, #8
 8002ab0:	2b08      	cmp	r3, #8
 8002ab2:	d10e      	bne.n	8002ad2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ab4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002ab8:	9300      	str	r3, [sp, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f82d 	bl	8002b22 <UART_WaitOnFlagUntilTimeout>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e023      	b.n	8002b1a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b04      	cmp	r3, #4
 8002ade:	d10e      	bne.n	8002afe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ae0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 f817 	bl	8002b22 <UART_WaitOnFlagUntilTimeout>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e00d      	b.n	8002b1a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2220      	movs	r2, #32
 8002b02:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2220      	movs	r2, #32
 8002b08:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b09c      	sub	sp, #112	; 0x70
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	60f8      	str	r0, [r7, #12]
 8002b2a:	60b9      	str	r1, [r7, #8]
 8002b2c:	603b      	str	r3, [r7, #0]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b32:	e0a5      	b.n	8002c80 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b3a:	f000 80a1 	beq.w	8002c80 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b3e:	f7fd ffb3 	bl	8000aa8 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d302      	bcc.n	8002b54 <UART_WaitOnFlagUntilTimeout+0x32>
 8002b4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d13e      	bne.n	8002bd2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b5c:	e853 3f00 	ldrex	r3, [r3]
 8002b60:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002b62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002b68:	667b      	str	r3, [r7, #100]	; 0x64
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	461a      	mov	r2, r3
 8002b70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b74:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002b78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002b7a:	e841 2300 	strex	r3, r2, [r1]
 8002b7e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002b80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1e6      	bne.n	8002b54 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	3308      	adds	r3, #8
 8002b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b90:	e853 3f00 	ldrex	r3, [r3]
 8002b94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b98:	f023 0301 	bic.w	r3, r3, #1
 8002b9c:	663b      	str	r3, [r7, #96]	; 0x60
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	3308      	adds	r3, #8
 8002ba4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002ba6:	64ba      	str	r2, [r7, #72]	; 0x48
 8002ba8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002baa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002bac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002bae:	e841 2300 	strex	r3, r2, [r1]
 8002bb2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002bb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1e5      	bne.n	8002b86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2220      	movs	r2, #32
 8002bbe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2220      	movs	r2, #32
 8002bc4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e067      	b.n	8002ca2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d04f      	beq.n	8002c80 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	69db      	ldr	r3, [r3, #28]
 8002be6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bee:	d147      	bne.n	8002c80 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bf8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c02:	e853 3f00 	ldrex	r3, [r3]
 8002c06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002c0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	461a      	mov	r2, r3
 8002c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c18:	637b      	str	r3, [r7, #52]	; 0x34
 8002c1a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c20:	e841 2300 	strex	r3, r2, [r1]
 8002c24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1e6      	bne.n	8002bfa <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	3308      	adds	r3, #8
 8002c32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	e853 3f00 	ldrex	r3, [r3]
 8002c3a:	613b      	str	r3, [r7, #16]
   return(result);
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	f023 0301 	bic.w	r3, r3, #1
 8002c42:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	3308      	adds	r3, #8
 8002c4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002c4c:	623a      	str	r2, [r7, #32]
 8002c4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c50:	69f9      	ldr	r1, [r7, #28]
 8002c52:	6a3a      	ldr	r2, [r7, #32]
 8002c54:	e841 2300 	strex	r3, r2, [r1]
 8002c58:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1e5      	bne.n	8002c2c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2220      	movs	r2, #32
 8002c64:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2220      	movs	r2, #32
 8002c6a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2220      	movs	r2, #32
 8002c70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e010      	b.n	8002ca2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	69da      	ldr	r2, [r3, #28]
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	68ba      	ldr	r2, [r7, #8]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	bf0c      	ite	eq
 8002c90:	2301      	moveq	r3, #1
 8002c92:	2300      	movne	r3, #0
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	461a      	mov	r2, r3
 8002c98:	79fb      	ldrb	r3, [r7, #7]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	f43f af4a 	beq.w	8002b34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3770      	adds	r7, #112	; 0x70
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
	...

08002cac <__libc_init_array>:
 8002cac:	b570      	push	{r4, r5, r6, lr}
 8002cae:	4d0d      	ldr	r5, [pc, #52]	; (8002ce4 <__libc_init_array+0x38>)
 8002cb0:	4c0d      	ldr	r4, [pc, #52]	; (8002ce8 <__libc_init_array+0x3c>)
 8002cb2:	1b64      	subs	r4, r4, r5
 8002cb4:	10a4      	asrs	r4, r4, #2
 8002cb6:	2600      	movs	r6, #0
 8002cb8:	42a6      	cmp	r6, r4
 8002cba:	d109      	bne.n	8002cd0 <__libc_init_array+0x24>
 8002cbc:	4d0b      	ldr	r5, [pc, #44]	; (8002cec <__libc_init_array+0x40>)
 8002cbe:	4c0c      	ldr	r4, [pc, #48]	; (8002cf0 <__libc_init_array+0x44>)
 8002cc0:	f000 f820 	bl	8002d04 <_init>
 8002cc4:	1b64      	subs	r4, r4, r5
 8002cc6:	10a4      	asrs	r4, r4, #2
 8002cc8:	2600      	movs	r6, #0
 8002cca:	42a6      	cmp	r6, r4
 8002ccc:	d105      	bne.n	8002cda <__libc_init_array+0x2e>
 8002cce:	bd70      	pop	{r4, r5, r6, pc}
 8002cd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cd4:	4798      	blx	r3
 8002cd6:	3601      	adds	r6, #1
 8002cd8:	e7ee      	b.n	8002cb8 <__libc_init_array+0xc>
 8002cda:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cde:	4798      	blx	r3
 8002ce0:	3601      	adds	r6, #1
 8002ce2:	e7f2      	b.n	8002cca <__libc_init_array+0x1e>
 8002ce4:	08002d6c 	.word	0x08002d6c
 8002ce8:	08002d6c 	.word	0x08002d6c
 8002cec:	08002d6c 	.word	0x08002d6c
 8002cf0:	08002d70 	.word	0x08002d70

08002cf4 <memset>:
 8002cf4:	4402      	add	r2, r0
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d100      	bne.n	8002cfe <memset+0xa>
 8002cfc:	4770      	bx	lr
 8002cfe:	f803 1b01 	strb.w	r1, [r3], #1
 8002d02:	e7f9      	b.n	8002cf8 <memset+0x4>

08002d04 <_init>:
 8002d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d06:	bf00      	nop
 8002d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d0a:	bc08      	pop	{r3}
 8002d0c:	469e      	mov	lr, r3
 8002d0e:	4770      	bx	lr

08002d10 <_fini>:
 8002d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d12:	bf00      	nop
 8002d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d16:	bc08      	pop	{r3}
 8002d18:	469e      	mov	lr, r3
 8002d1a:	4770      	bx	lr
